name: Issue Approval

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check_approval:
    runs-on: ubuntu-latest
    outputs:
      should_process: ${{ steps.check_approval.outputs.should_process }}
    steps:
      - name: Check if comment is approval command
        id: check_approval
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim().toLowerCase();
            if (comment !== '/approve') {
              core.setOutput('should_process', 'false');
              return;
            }

            // Check if commenter is a maintainer
            const { data: collaborators } = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const commenter = context.payload.comment.user.login;
            const isMaintainer = collaborators.some(collab => 
              collab.login === commenter && 
              (collab.permissions.admin || collab.permissions.maintain || collab.permissions.write)
            );

            if (!isMaintainer) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: '❌ Only maintainers can approve issues. Your approval request has been ignored.'
              });
              core.setOutput('should_process', 'false');
              return;
            }

            // Check if issue title contains packagefox:
            const issueTitle = context.payload.issue.title;
            if (!issueTitle.includes('packagefox:')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: '❌ This issue is not a packagefox request. Approval ignored.'
              });
              core.setOutput('should_process', 'false');
              return;
            }

            // Add approved label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['approved']
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '✅ Issue approved by maintainer. Processing will begin shortly.'
            });

            core.setOutput('should_process', 'true');

  process_approved_issue:
    needs: check_approval
    if: needs.check_approval.outputs.should_process == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: scripts/package-lock.json

      - name: Install Script Dependencies
        run: cd scripts && npm install

      - name: Run Issue Processing Script
        id: issue_data
        run: cd scripts && npm run process-issue
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare packagefox-build.json
        id: prepare_file
        run: |
          set -e
          mkdir -p .microfox
          EXISTING_JSON=$(cat .microfox/packagefox-build.json 2>/dev/null || echo '{"requests":[]}')
          NEW_REQUEST_PAYLOAD='${{ steps.issue_data.outputs.json_payload }}'

          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          echo "Existing JSON: $EXISTING_JSON"
          echo "New Payload: $NEW_REQUEST_PAYLOAD"
          
          # Validate that NEW_REQUEST_PAYLOAD is valid JSON
          if ! echo "$NEW_REQUEST_PAYLOAD" | jq empty 2>/dev/null; then
            echo "Error: NEW_REQUEST_PAYLOAD is not valid JSON"
            exit 1
          fi
          
          # Validate that EXISTING_JSON is valid JSON, if not create default structure
          if ! echo "$EXISTING_JSON" | jq empty 2>/dev/null; then
            echo "Warning: EXISTING_JSON is not valid JSON, using default structure"
            EXISTING_JSON='{"requests":[]}'
          fi
          
          UPDATED_JSON=$(echo "$EXISTING_JSON" | jq --argjson payload "$NEW_REQUEST_PAYLOAD" '
            if type == "object" and has("requests") and (.requests | type == "array") then
              .requests += [$payload]
            else
              {"requests": [$payload]}
            end
          ')

          echo "Updated JSON: $UPDATED_JSON"
          echo "$UPDATED_JSON" | jq '.' > .microfox/packagefox-build.json
          echo "File .microfox/packagefox-build.json prepared successfully."
        shell: bash

      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PACKAGEFOX_APP_ID }}
          private_key: ${{ secrets.PACKAGEFOX_PRIVATE_KEY }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate_token.outputs.token }}
          commit-message: ${{ steps.issue_data.outputs.commit_message }}
          branch: ${{ steps.issue_data.outputs.branch_name }}
          delete-branch: true
          title: ${{ steps.issue_data.outputs.pr_title }}
          body: ${{ steps.issue_data.outputs.pr_body }}
          add-paths: .microfox/packagefox-build.json
          labels: |
            automated-pr
            from-issues
            approved
          assignees: ${{ github.actor }}
