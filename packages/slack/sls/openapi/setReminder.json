{
  "post": {
    "operationId": "setReminder",
    "summary": "Sets a reminder for a user in Slack.",
    "description": "The setReminder function allows setting a reminder for a specified Slack user. It takes the user ID, reminder text, and time as inputs, and returns the details of the created reminder. This function integrates with the Slack API to manage user reminders efficiently.",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "description": "Body of the setReminder sls call",
                "properties": {
                  "arguments": {
                    "type": "object",
                    "description": "Parameters for setting a reminder",
                    "properties": {
                      "userId": {
                        "type": "string",
                        "description": "The ID of the user to set the reminder for"
                      },
                      "text": {
                        "type": "string",
                        "description": "The text of the reminder"
                      },
                      "time": {
                        "type": "string",
                        "description": "A string describing when the reminder should fire (e.g., \"in 5 minutes\", \"at 10:30am\", or a Unix timestamp)"
                      }
                    },
                    "required": [
                      "userId",
                      "text",
                      "time"
                    ]
                  },
                  "constructor": {
                    "type": "string",
                    "description": "Name of the constructor to use.",
                    "enum": [
                      "MicrofoxSlackClient"
                    ]
                  }
                },
                "required": [
                  "arguments"
                ]
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "description": "true if the request was successful"
                },
                "reminder": {
                  "type": "object",
                  "description": "An object containing the details of the created reminder",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the reminder"
                    },
                    "creator": {
                      "type": "string",
                      "description": "The ID of the user who created the reminder"
                    },
                    "user": {
                      "type": "string",
                      "description": "The ID of the user the reminder is for"
                    },
                    "text": {
                      "type": "string",
                      "description": "The text of the reminder"
                    },
                    "recurring": {
                      "type": "boolean",
                      "description": "Whether the reminder is recurring"
                    },
                    "time": {
                      "type": "integer",
                      "description": "The timestamp of when the reminder will fire"
                    },
                    "complete_ts": {
                      "type": "integer",
                      "description": "The timestamp of when the reminder was completed"
                    }
                  },
                  "required": [
                    "id",
                    "creator",
                    "user",
                    "text",
                    "recurring",
                    "time"
                  ]
                }
              },
              "required": [
                "ok",
                "reminder"
              ]
            }
          }
        }
      },
      "400": {
        "description": "Bad Request - The request was invalid or cannot be served",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": "Indicates the request was unsuccessful"
                },
                "error": {
                  "type": "string",
                  "description": "Error message describing the issue"
                }
              },
              "required": [
                "ok",
                "error"
              ]
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - Authentication failed or user doesn't have permissions for the requested operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": "Indicates the request was unsuccessful"
                },
                "error": {
                  "type": "string",
                  "description": "Error message indicating authentication failure"
                }
              },
              "required": [
                "ok",
                "error"
              ]
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": "Indicates the request was unsuccessful"
                },
                "error": {
                  "type": "string",
                  "description": "Error message describing the server error"
                }
              },
              "required": [
                "ok",
                "error"
              ]
            }
          }
        }
      }
    }
  }
}