{
  "post": {
    "operationId": "replyMessage",
    "summary": "Replies to a message in a Slack thread.",
    "description": "The replyMessage function allows users to reply to an existing message in a Slack thread. It takes the channel ID, the timestamp of the original message, and the text of the reply as input. This function is useful for maintaining context in conversations and organizing discussions within Slack channels.",
    "tags": [
      "message"
    ],
    "ai": {
      "systemPrompt": "To reply within a thread, provide the `channelId` (starts with 'C'), the `thread_ts` of the parent message, and the `text` of your reply. DO NOT ASSUME THE CHANNEL ID OR THREAD TIMESTAMP BY NAME. If channelId is unknown, use `getChannelsIds` to get the paginated channelIds to names mapper and find the channelId by name from the output. If thread_ts is unknown, use `getConversationHistory` to find it."
    },
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "description": "Body of the replyMessage sls call",
                "properties": {
                  "arguments": {
                    "type": "object",
                    "properties": {
                      "channelId": {
                        "type": "string",
                        "description": "The ID of the channel where the message is. Channel IDs start with 'C'."
                      },
                      "thread_ts": {
                        "type": "string",
                        "description": "The timestamp of the message to reply to, which establishes the thread."
                      },
                      "text": {
                        "type": "string",
                        "description": "The text of the reply."
                      }
                    },
                    "required": [
                      "channelId",
                      "thread_ts",
                      "text"
                    ]
                  }
                },
                "required": [
                  "arguments"
                ]
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "description": "true if the request was successful."
                },
                "channel": {
                  "type": "string",
                  "description": "The ID of the channel where the message was posted."
                },
                "ts": {
                  "type": "string",
                  "description": "The timestamp of the message."
                },
                "message": {
                  "type": "object",
                  "description": "An object containing the details of the sent message."
                }
              },
              "required": [
                "ok",
                "channel",
                "ts",
                "message"
              ]
            }
          }
        }
      },
      "400": {
        "description": "Bad Request - The request was invalid or cannot be served.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}
