{
  "post": {
    "operationId": "reactMessage",
    "summary": "Add a reaction emoji to a Slack message.",
    "description": "The reactMessage function allows adding an emoji reaction to a specific message in a Slack channel. It requires the channel ID, message timestamp, and the name of the emoji to be used as the reaction. This function is part of the MicrofoxSlackClient and interacts with Slack's API to perform the reaction action.",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "description": "Body of the reactMessage sls call",
                "properties": {
                  "arguments": {
                    "type": "object",
                    "description": "Parameters for adding a reaction to a Slack message",
                    "properties": {
                      "channelId": {
                        "type": "string",
                        "description": "The ID of the channel where the message is located"
                      },
                      "timestamp": {
                        "type": "string",
                        "description": "The timestamp of the message to react to"
                      },
                      "reaction": {
                        "type": "string",
                        "description": "The name of the emoji to use for the reaction (e.g., 'tada', 'thumbsup')"
                      }
                    },
                    "required": [
                      "channelId",
                      "timestamp",
                      "reaction"
                    ]
                  },
                  "constructor": {
                    "type": "string",
                    "description": "Name of the constructor to use.",
                    "enum": [
                      "MicrofoxSlackClient"
                    ]
                  }
                },
                "required": [
                  "arguments"
                ]
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "description": "true if the request was successful"
                }
              },
              "required": [
                "ok"
              ]
            }
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message describing the issue with the request"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "404": {
        "description": "Not Found - Channel or message not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the channel or message was not found"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the rate limit has been exceeded"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message describing the internal server error"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        }
      }
    }
  }
}