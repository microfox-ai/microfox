{
  "openapi": "3.0.1",
  "info": {
    "title": "Microfox Slack API",
    "version": "1.0.0",
    "description": "Single entry-point API for all Microfox Slack functions via a wrapper Lambda",
    "packageName": "@microfox/slack",
    "contact": {
      "name": "Microfox Dev Support",
      "email": "support@microfox.com"
    }
  },
  "servers": [
    {
      "url": "https://api.microfox.com/c/slack",
      "description": "Unified wrapper endpoint"
    }
  ],
  "paths": {
    "/WebClient/chat-postMessage": {
      "post": {
        "operationId": "chat.postMessage",
        "summary": "Sends a message to a Slack channel.",
        "description": "The chat.postMessage function allows sending a message to a specified Slack channel, private group, or IM channel. It supports various customization options including text formatting, attachments, blocks, and metadata. The function can be used to send messages as a bot or authenticated user, with options for threading and visibility control.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the chat.postMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Message configuration object",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "Channel, private group, or IM channel ID to send message to. Can be an encoded ID, or a channel name."
                              },
                              "text": {
                                "type": "string",
                                "description": "The formatted text of the message to be published. If blocks are included, this will be used as fallback text for notifications."
                              },
                              "attachments": {
                                "type": "string",
                                "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                              },
                              "blocks": {
                                "type": "string",
                                "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                              },
                              "as_user": {
                                "type": "boolean",
                                "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false."
                              },
                              "icon_emoji": {
                                "type": "string",
                                "description": "Emoji to use as the icon for this message. Overrides icon_url."
                              },
                              "icon_url": {
                                "type": "string",
                                "description": "URL to an image to use as the icon for this message."
                              },
                              "link_names": {
                                "type": "boolean",
                                "description": "Find and link user groups."
                              },
                              "mrkdwn": {
                                "type": "boolean",
                                "description": "Disable Slack markup parsing by setting to false. Enabled by default."
                              },
                              "metadata": {
                                "type": "string",
                                "description": "JSON object with event_type and event_payload fields, presented as a URL-encoded string."
                              },
                              "parse": {
                                "type": "string",
                                "description": "Change how messages are treated. Defaults to none."
                              },
                              "reply_broadcast": {
                                "type": "boolean",
                                "description": "Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false."
                              },
                              "thread_ts": {
                                "type": "string",
                                "description": "The ts value of another message to reply to."
                              },
                              "unfurl_links": {
                                "type": "boolean",
                                "description": "Pass true to enable unfurling of primarily text-based content."
                              },
                              "unfurl_media": {
                                "type": "boolean",
                                "description": "Pass false to disable unfurling of media content."
                              },
                              "username": {
                                "type": "string",
                                "description": "Set your bot's user name."
                              }
                            },
                            "required": [
                              "channel"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message"
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found",
                        "not_in_channel",
                        "is_archived",
                        "msg_too_long",
                        "no_text",
                        "too_many_attachments",
                        "rate_limited",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ],
                      "description": "Error code explaining the failure"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code indicating a server-side issue"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/chat-update": {
      "post": {
        "operationId": "chat.update",
        "summary": "Updates an existing message in a Slack channel.",
        "description": "The chat.update method allows you to modify an existing message in a Slack channel. This is particularly useful for updating the status of long-running tasks or providing progressive information to users. The method supports updating the message text, adding structured blocks or attachments, and can be used with various options to control the message's appearance and behavior.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the chat.update sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Configuration object containing all function parameters",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "The ID of the conversation to update the message in."
                              },
                              "ts": {
                                "type": "string",
                                "description": "The timestamp of the message to be updated."
                              },
                              "text": {
                                "type": "string",
                                "description": "The new text for the message. Required if blocks and attachments are not provided."
                              },
                              "attachments": {
                                "type": "string",
                                "description": "A JSON-based array of structured attachments."
                              },
                              "blocks": {
                                "type": "array",
                                "description": "An array of structured blocks.",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "as_user": {
                                "type": "boolean",
                                "description": "Pass true to update the message as the authed user. Bot users are considered authed users."
                              },
                              "link_names": {
                                "type": "boolean",
                                "description": "Find and link channel names and usernames."
                              },
                              "parse": {
                                "type": "string",
                                "description": "Change how messages are treated. Defaults to 'client'. Can be 'none' or 'full'.",
                                "enum": [
                                  "client",
                                  "none",
                                  "full"
                                ]
                              },
                              "metadata": {
                                "type": "string",
                                "description": "A JSON object with event_type and event_payload fields."
                              }
                            },
                            "required": [
                              "channel",
                              "ts"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted."
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    },
                    "text": {
                      "type": "string",
                      "description": "The new text of the message."
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message."
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "cant_update_message",
                        "channel_not_found",
                        "message_not_found",
                        "edit_window_closed",
                        "msg_too_long",
                        "no_text",
                        "as_user_not_supported",
                        "invalid_blocks",
                        "not_in_channel",
                        "is_archived",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "ratelimited"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "service_unavailable"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/conversations-history": {
      "post": {
        "operationId": "conversations.history",
        "summary": "Fetches a conversation's history of messages and events.",
        "description": "The conversations.history method retrieves the message and event history for a specified conversation (channel). It allows pagination, filtering by timestamp, and includes options for metadata inclusion. The method returns an array of message objects along with pagination information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.history sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Parameters for fetching conversation history",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "Conversation ID to fetch history for."
                              },
                              "cursor": {
                                "type": "string",
                                "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request."
                              },
                              "include_all_metadata": {
                                "type": "boolean",
                                "description": "Return all metadata associated with this message. Default false."
                              },
                              "inclusive": {
                                "type": "boolean",
                                "description": "Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified."
                              },
                              "latest": {
                                "type": "string",
                                "description": "Only messages before this Unix timestamp will be included in results."
                              },
                              "limit": {
                                "type": "integer",
                                "description": "The maximum number of items to return."
                              },
                              "oldest": {
                                "type": "string",
                                "description": "Only messages after this Unix timestamp will be included in results."
                              }
                            },
                            "required": [
                              "channel"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "messages": {
                      "type": "array",
                      "description": "An array of message objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of message."
                          },
                          "user": {
                            "type": "string",
                            "description": "The ID of the user who sent the message."
                          },
                          "text": {
                            "type": "string",
                            "description": "The text of the message."
                          },
                          "ts": {
                            "type": "string",
                            "description": "The timestamp of the message."
                          }
                        }
                      }
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "true if there are more messages to retrieve."
                    },
                    "pin_count": {
                      "type": "integer",
                      "description": "The number of pinned messages in the channel."
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found",
                        "invalid_cursor",
                        "invalid_ts_latest",
                        "invalid_ts_oldest",
                        "not_in_channel",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable",
                        "team_added_to_org"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/conversations-join": {
      "post": {
        "operationId": "conversations.join",
        "summary": "Join an existing public channel in Slack.",
        "description": "The conversations.join method allows a user or bot to join an existing public channel in a Slack workspace. This is essential for bots that need to be active in specific channels. The method requires a channel ID and returns details about the joined conversation.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.join sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "The ID of the conversation to join."
                              }
                            },
                            "required": [
                              "channel"
                            ],
                            "description": "Parameters for joining a conversation"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channel": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing"
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel"
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021"
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot"
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users"
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members"
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created"
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation"
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived"
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel"
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel"
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced"
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel"
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization"
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization"
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined"
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first"
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation"
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic"
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose"
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel"
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found",
                        "is_archived",
                        "method_not_supported_for_channel_type",
                        "missing_scope",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission",
                        "user_is_restricted"
                      ],
                      "description": "Error code explaining the failure"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code explaining the failure"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Error code explaining the failure"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/conversations-list": {
      "post": {
        "operationId": "conversations.list",
        "summary": "Retrieves a list of conversations (channels, private channels, DMs, and MPDMs) in a Slack workspace.",
        "description": "The conversations.list method allows you to fetch a list of conversations in a Slack workspace. It supports pagination and filtering options to customize the results. The method returns detailed information about each conversation, including its type, members, and various attributes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.list sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Parameters for filtering and paginating conversation results",
                            "properties": {
                              "cursor": {
                                "type": "string",
                                "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request."
                              },
                              "exclude_archived": {
                                "type": "boolean",
                                "description": "Set to true to exclude archived channels from the list. Default is false."
                              },
                              "limit": {
                                "type": "integer",
                                "description": "The maximum number of items to return. Must be an integer under 1000. Default is 100.",
                                "minimum": 1,
                                "maximum": 999
                              },
                              "team_id": {
                                "type": "string",
                                "description": "Required for org-wide apps."
                              },
                              "types": {
                                "type": "string",
                                "description": "A comma-separated list of conversation types to include. Types can be public_channel, private_channel, mpim, and im. Default is public_channel."
                              }
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with a list of conversations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channels": {
                      "type": "array",
                      "description": "An array of conversation objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the conversation"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the channel-like thing"
                          },
                          "is_channel": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is a channel"
                          },
                          "is_group": {
                            "type": "boolean",
                            "description": "Means the channel is a private channel created before March 2021"
                          },
                          "is_im": {
                            "type": "boolean",
                            "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot"
                          },
                          "is_mpim": {
                            "type": "boolean",
                            "description": "Represents an unnamed private conversation between multiple users"
                          },
                          "is_private": {
                            "type": "boolean",
                            "description": "Means the conversation is privileged between two or more members"
                          },
                          "created": {
                            "type": "integer",
                            "description": "Timestamp of when the conversation was created"
                          },
                          "creator": {
                            "type": "string",
                            "description": "The ID of the member that created this conversation"
                          },
                          "is_archived": {
                            "type": "boolean",
                            "description": "Indicates a conversation is archived"
                          },
                          "is_general": {
                            "type": "boolean",
                            "description": "Means the channel is the workspace's \"general\" discussion channel"
                          },
                          "unlinked": {
                            "type": "integer",
                            "description": "The number of members that have been removed from the channel"
                          },
                          "name_normalized": {
                            "type": "string",
                            "description": "The channel name, but with any special characters replaced"
                          },
                          "is_shared": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is part of a Shared Channel"
                          },
                          "is_ext_shared": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization"
                          },
                          "is_org_shared": {
                            "type": "boolean",
                            "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization"
                          },
                          "pending_shared": {
                            "type": "array",
                            "description": "A list of team IDs that have been invited to the channel but have not yet joined",
                            "items": {
                              "type": "string"
                            }
                          },
                          "is_pending_ext_shared": {
                            "type": "boolean",
                            "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first"
                          },
                          "is_member": {
                            "type": "boolean",
                            "description": "Indicates whether the user, bot user or Slack app is a member of the conversation"
                          },
                          "topic": {
                            "type": "object",
                            "description": "Provides information about the channel topic"
                          },
                          "purpose": {
                            "type": "object",
                            "description": "Provides information about the channel purpose"
                          },
                          "previous_names": {
                            "type": "array",
                            "description": "A list of previous names for the channel",
                            "items": {
                              "type": "string"
                            }
                          },
                          "num_members": {
                            "type": "integer",
                            "description": "The number of members in the conversation"
                          }
                        }
                      }
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information"
                    }
                  },
                  "required": [
                    "ok",
                    "channels"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_cursor",
                        "invalid_limit",
                        "invalid_types",
                        "method_not_supported_for_channel_type",
                        "invalid_arguments",
                        "invalid_arg_name"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_auth",
                        "not_authed",
                        "token_revoked"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "missing_scope",
                        "team_access_not_granted",
                        "access_denied",
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/reactions-add": {
      "post": {
        "operationId": "reactions.add",
        "summary": "Adds a reaction (emoji) to a message in a Slack channel.",
        "description": "The reactions.add function allows users to add an emoji reaction to a specific message in a Slack channel. It requires the channel ID, the timestamp of the message, and the name of the reaction (emoji) to be added. This function is useful for providing quick, non-verbal feedback or responses to messages in Slack conversations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reactions.add sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Configuration object containing all function parameters",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "Channel where the message to add reaction to was posted"
                              },
                              "name": {
                                "type": "string",
                                "description": "Reaction (emoji) name"
                              },
                              "timestamp": {
                                "type": "string",
                                "description": "Timestamp of the message to add reaction to"
                              }
                            },
                            "required": [
                              "channel",
                              "name",
                              "timestamp"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error code",
                      "enum": [
                        "already_reacted",
                        "bad_timestamp",
                        "channel_not_found",
                        "invalid_name",
                        "is_archived",
                        "message_not_found",
                        "no_item_specified",
                        "not_reactable",
                        "thread_locked",
                        "too_many_emoji",
                        "too_many_reactions",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable",
                        "team_added_to_org"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/users-info": {
      "post": {
        "operationId": "users.info",
        "summary": "Retrieves detailed information about a specific Slack user.",
        "description": "The users.info method fetches comprehensive details about a user in a Slack workspace. It returns a user object containing various attributes such as user ID, name, profile information, team details, and account status. This method is useful for obtaining up-to-date user information for display or processing purposes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.info sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "user": {
                                "type": "string",
                                "description": "User ID to receive information about."
                              },
                              "include_locale": {
                                "type": "boolean",
                                "description": "Set to true to receive the locale for this user. Defaults to false."
                              }
                            },
                            "required": [
                              "user"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The user's ID"
                        },
                        "team_id": {
                          "type": "string",
                          "description": "The ID of the team the user belongs to"
                        },
                        "name": {
                          "type": "string",
                          "description": "The user's username"
                        },
                        "deleted": {
                          "type": "boolean",
                          "description": "True if the user has been deleted"
                        },
                        "color": {
                          "type": "string",
                          "description": "A hexadecimal color code that is used to color the user's name in Slack clients"
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's real name"
                        },
                        "tz": {
                          "type": "string",
                          "description": "The user's timezone (e.g., America/Los_Angeles)"
                        },
                        "tz_label": {
                          "type": "string",
                          "description": "A human-readable string for the user's timezone"
                        },
                        "tz_offset": {
                          "type": "integer",
                          "description": "The user's timezone offset in seconds"
                        },
                        "profile": {
                          "type": "object",
                          "description": "A profile object containing more details about the user",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The user's title"
                            },
                            "phone": {
                              "type": "string",
                              "description": "The user's phone number"
                            },
                            "skype": {
                              "type": "string",
                              "description": "The user's Skype username"
                            },
                            "real_name": {
                              "type": "string",
                              "description": "The user's real name"
                            },
                            "real_name_normalized": {
                              "type": "string",
                              "description": "The user's real name, normalized"
                            },
                            "display_name": {
                              "type": "string",
                              "description": "The user's display name"
                            },
                            "display_name_normalized": {
                              "type": "string",
                              "description": "The user's display name, normalized"
                            },
                            "status_text": {
                              "type": "string",
                              "description": "The user's status text"
                            },
                            "status_emoji": {
                              "type": "string",
                              "description": "The user's status emoji"
                            },
                            "avatar_hash": {
                              "type": "string",
                              "description": "A hash of the user's avatar image"
                            },
                            "image_original": {
                              "type": "string",
                              "description": "The URL of the user's original-sized profile image"
                            },
                            "image_24": {
                              "type": "string",
                              "description": "The URL of the user's 24x24 profile image"
                            },
                            "image_32": {
                              "type": "string",
                              "description": "The URL of the user's 32x32 profile image"
                            },
                            "image_48": {
                              "type": "string",
                              "description": "The URL of the user's 48x48 profile image"
                            },
                            "image_72": {
                              "type": "string",
                              "description": "The URL of the user's 72x72 profile image"
                            },
                            "image_192": {
                              "type": "string",
                              "description": "The URL of the user's 192x192 profile image"
                            },
                            "image_512": {
                              "type": "string",
                              "description": "The URL of the user's 512x512 profile image"
                            },
                            "team": {
                              "type": "string",
                              "description": "The ID of the team the user belongs to"
                            }
                          }
                        },
                        "is_admin": {
                          "type": "boolean",
                          "description": "True if the user is an admin"
                        },
                        "is_owner": {
                          "type": "boolean",
                          "description": "True if the user is an owner"
                        },
                        "is_primary_owner": {
                          "type": "boolean",
                          "description": "True if the user is the primary owner"
                        },
                        "is_restricted": {
                          "type": "boolean",
                          "description": "True if the user is a restricted user (single-channel guest)"
                        },
                        "is_ultra_restricted": {
                          "type": "boolean",
                          "description": "True if the user is an ultra-restricted user (multi-channel guest)"
                        },
                        "is_bot": {
                          "type": "boolean",
                          "description": "True if the user is a bot"
                        },
                        "updated": {
                          "type": "integer",
                          "description": "A timestamp of when the user's profile was last updated"
                        },
                        "is_app_user": {
                          "type": "boolean",
                          "description": "True if the user is an app user"
                        },
                        "has_2fa": {
                          "type": "boolean",
                          "description": "True if the user has two-factor authentication enabled"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "user"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "user_not_found",
                        "user_not_visible",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/users-list": {
      "post": {
        "operationId": "users.list",
        "summary": "Retrieves a list of all users in a Slack team.",
        "description": "The users.list method returns a comprehensive list of all users in a Slack team, including their profile information and various attributes. It supports pagination and allows filtering by team ID when using an org token. This method is useful for obtaining detailed information about team members and their roles within the Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.list sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request.",
                            "name": "cursor"
                          },
                          {
                            "type": "boolean",
                            "description": "Set this to true to receive the locale for users. Defaults to false.",
                            "name": "include_locale"
                          },
                          {
                            "type": "integer",
                            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
                            "name": "limit"
                          },
                          {
                            "type": "string",
                            "description": "Encoded team id to list users in, required if org token is used.",
                            "name": "team_id"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "members": {
                      "type": "array",
                      "description": "An array of user objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The user's ID."
                          },
                          "team_id": {
                            "type": "string",
                            "description": "The ID of the team the user belongs to."
                          },
                          "name": {
                            "type": "string",
                            "description": "The user's username."
                          },
                          "deleted": {
                            "type": "boolean",
                            "description": "true if the user has been deleted."
                          },
                          "color": {
                            "type": "string",
                            "description": "A hexadecimal color code that is used to color the user's name in Slack clients."
                          },
                          "real_name": {
                            "type": "string",
                            "description": "The user's real name."
                          },
                          "tz": {
                            "type": "string",
                            "description": "The user's timezone (e.g., America/Los_Angeles)."
                          },
                          "tz_label": {
                            "type": "string",
                            "description": "A human-readable string for the user's timezone."
                          },
                          "tz_offset": {
                            "type": "integer",
                            "description": "The user's timezone offset in seconds."
                          },
                          "profile": {
                            "type": "object",
                            "description": "A profile object containing more details about the user.",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The user's title."
                              },
                              "phone": {
                                "type": "string",
                                "description": "The user's phone number."
                              },
                              "skype": {
                                "type": "string",
                                "description": "The user's Skype username."
                              },
                              "real_name": {
                                "type": "string",
                                "description": "The user's real name."
                              },
                              "real_name_normalized": {
                                "type": "string",
                                "description": "The user's real name, normalized."
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The user's display name."
                              },
                              "display_name_normalized": {
                                "type": "string",
                                "description": "The user's display name, normalized."
                              },
                              "status_text": {
                                "type": "string",
                                "description": "The user's status text."
                              },
                              "status_emoji": {
                                "type": "string",
                                "description": "The user's status emoji."
                              },
                              "avatar_hash": {
                                "type": "string",
                                "description": "A hash of the user's avatar image."
                              },
                              "image_original": {
                                "type": "string",
                                "description": "The URL of the user's original-sized profile image."
                              },
                              "image_24": {
                                "type": "string",
                                "description": "The URL of the user's 24x24 profile image."
                              },
                              "image_32": {
                                "type": "string",
                                "description": "The URL of the user's 32x32 profile image."
                              },
                              "image_48": {
                                "type": "string",
                                "description": "The URL of the user's 48x48 profile image."
                              },
                              "image_72": {
                                "type": "string",
                                "description": "The URL of the user's 72x72 profile image."
                              },
                              "image_192": {
                                "type": "string",
                                "description": "The URL of the user's 192x192 profile image."
                              },
                              "image_512": {
                                "type": "string",
                                "description": "The URL of the user's 512x512 profile image."
                              },
                              "team": {
                                "type": "string",
                                "description": "The ID of the team the user belongs to."
                              }
                            }
                          },
                          "is_admin": {
                            "type": "boolean",
                            "description": "true if the user is an admin."
                          },
                          "is_owner": {
                            "type": "boolean",
                            "description": "true if the user is an owner."
                          },
                          "is_primary_owner": {
                            "type": "boolean",
                            "description": "true if the user is the primary owner."
                          },
                          "is_restricted": {
                            "type": "boolean",
                            "description": "true if the user is a restricted user (single-channel guest)."
                          },
                          "is_ultra_restricted": {
                            "type": "boolean",
                            "description": "true if the user is an ultra-restricted user (multi-channel guest)."
                          },
                          "is_bot": {
                            "type": "boolean",
                            "description": "true if the user is a bot."
                          },
                          "updated": {
                            "type": "integer",
                            "description": "A timestamp of when the user's profile was last updated."
                          },
                          "is_app_user": {
                            "type": "boolean",
                            "description": "true if the user is an app user."
                          },
                          "has_2fa": {
                            "type": "boolean",
                            "description": "true if the user has two-factor authentication enabled."
                          }
                        }
                      }
                    },
                    "cache_ts": {
                      "type": "integer",
                      "description": "A timestamp of when the user list was cached."
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information."
                    }
                  },
                  "required": [
                    "ok",
                    "members"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_cursor",
                        "limit_required",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/users-lookupByEmail": {
      "post": {
        "operationId": "users.lookupByEmail",
        "summary": "Finds a user by their email address in a Slack workspace.",
        "description": "The users.lookupByEmail method allows you to find a user in a Slack workspace using their email address. This is particularly useful for integrations where you have a user's email but not their Slack ID. The method returns detailed information about the user if found.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.lookupByEmail sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "An email address belonging to a user in the workspace."
                              }
                            },
                            "required": [
                              "email"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The user's ID"
                        },
                        "team_id": {
                          "type": "string",
                          "description": "The ID of the team the user belongs to"
                        },
                        "name": {
                          "type": "string",
                          "description": "The user's username"
                        },
                        "deleted": {
                          "type": "boolean",
                          "description": "True if the user has been deleted"
                        },
                        "color": {
                          "type": "string",
                          "description": "A hexadecimal color code for the user's name in Slack clients"
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's real name"
                        },
                        "tz": {
                          "type": "string",
                          "description": "The user's timezone"
                        },
                        "tz_label": {
                          "type": "string",
                          "description": "A human-readable string for the user's timezone"
                        },
                        "tz_offset": {
                          "type": "integer",
                          "description": "The user's timezone offset in seconds"
                        },
                        "profile": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The user's title"
                            },
                            "phone": {
                              "type": "string",
                              "description": "The user's phone number"
                            },
                            "skype": {
                              "type": "string",
                              "description": "The user's Skype username"
                            },
                            "real_name": {
                              "type": "string",
                              "description": "The user's real name"
                            },
                            "real_name_normalized": {
                              "type": "string",
                              "description": "The user's real name, normalized"
                            },
                            "display_name": {
                              "type": "string",
                              "description": "The user's display name"
                            },
                            "display_name_normalized": {
                              "type": "string",
                              "description": "The user's display name, normalized"
                            },
                            "status_text": {
                              "type": "string",
                              "description": "The user's status text"
                            },
                            "status_emoji": {
                              "type": "string",
                              "description": "The user's status emoji"
                            },
                            "avatar_hash": {
                              "type": "string",
                              "description": "A hash of the user's avatar image"
                            },
                            "image_original": {
                              "type": "string",
                              "description": "The URL of the user's original-sized profile image"
                            },
                            "image_24": {
                              "type": "string",
                              "description": "The URL of the user's 24x24 profile image"
                            },
                            "image_32": {
                              "type": "string",
                              "description": "The URL of the user's 32x32 profile image"
                            },
                            "image_48": {
                              "type": "string",
                              "description": "The URL of the user's 48x48 profile image"
                            },
                            "image_72": {
                              "type": "string",
                              "description": "The URL of the user's 72x72 profile image"
                            },
                            "image_192": {
                              "type": "string",
                              "description": "The URL of the user's 192x192 profile image"
                            },
                            "image_512": {
                              "type": "string",
                              "description": "The URL of the user's 512x512 profile image"
                            },
                            "team": {
                              "type": "string",
                              "description": "The ID of the team the user belongs to"
                            }
                          }
                        },
                        "is_admin": {
                          "type": "boolean",
                          "description": "True if the user is an admin"
                        },
                        "is_owner": {
                          "type": "boolean",
                          "description": "True if the user is an owner"
                        },
                        "is_primary_owner": {
                          "type": "boolean",
                          "description": "True if the user is the primary owner"
                        },
                        "is_restricted": {
                          "type": "boolean",
                          "description": "True if the user is a restricted user (single-channel guest)"
                        },
                        "is_ultra_restricted": {
                          "type": "boolean",
                          "description": "True if the user is an ultra-restricted user (multi-channel guest)"
                        },
                        "is_bot": {
                          "type": "boolean",
                          "description": "True if the user is a bot"
                        },
                        "updated": {
                          "type": "integer",
                          "description": "A timestamp of when the user's profile was last updated"
                        },
                        "is_app_user": {
                          "type": "boolean",
                          "description": "True if the user is an app user"
                        },
                        "has_2fa": {
                          "type": "boolean",
                          "description": "True if the user has two-factor authentication enabled"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "users_not_found",
                        "missing_scope",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/views-open": {
      "post": {
        "operationId": "views.open",
        "summary": "Opens a modal view for a user in Slack.",
        "description": "The views.open method opens a modal for a user in Slack. It requires a trigger_id obtained from a user interaction and a view payload defining the modal's content and behavior. This method allows for creating interactive surfaces for various purposes such as forms, alerts, and more.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the views.open sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Configuration object containing all function parameters",
                            "properties": {
                              "trigger_id": {
                                "type": "string",
                                "description": "Exchange a trigger to post to the user"
                              },
                              "view": {
                                "type": "object",
                                "description": "A view payload defining the modal's content and behavior",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "modal"
                                    ],
                                    "description": "The type of view, set to 'modal' for modals"
                                  },
                                  "title": {
                                    "type": "object",
                                    "description": "The title that appears in the top-left of the modal",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "plain_text"
                                        ],
                                        "description": "Type of the text element"
                                      },
                                      "text": {
                                        "type": "string",
                                        "maxLength": 24,
                                        "description": "The text content of the title"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text"
                                    ]
                                  },
                                  "submit": {
                                    "type": "object",
                                    "description": "Defines the text displayed in the submit button",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "plain_text"
                                        ],
                                        "description": "Type of the text element"
                                      },
                                      "text": {
                                        "type": "string",
                                        "maxLength": 24,
                                        "description": "The text content of the submit button"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text"
                                    ]
                                  },
                                  "blocks": {
                                    "type": "array",
                                    "description": "An array of blocks that defines the content of the view",
                                    "maxItems": 100,
                                    "items": {
                                      "type": "object",
                                      "description": "A block object"
                                    }
                                  },
                                  "private_metadata": {
                                    "type": "string",
                                    "maxLength": 3000,
                                    "description": "A string that will be sent to your app in view_submission and block_actions events"
                                  },
                                  "callback_id": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "description": "An identifier to recognize interactions and submissions of this particular view"
                                  },
                                  "external_id": {
                                    "type": "string",
                                    "description": "A custom identifier that must be unique for all views on a per-team basis"
                                  },
                                  "clear_on_close": {
                                    "type": "boolean",
                                    "description": "When set to true, clicking on the close button will clear all views in a modal and close it",
                                    "default": false
                                  },
                                  "notify_on_close": {
                                    "type": "boolean",
                                    "description": "Indicates whether Slack will send your request URL a view_closed event when a user clicks the close button",
                                    "default": false
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "blocks"
                                ]
                              }
                            },
                            "required": [
                              "trigger_id",
                              "view"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "view": {
                      "type": "object",
                      "description": "The view object that was opened",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for the view"
                        },
                        "team_id": {
                          "type": "string",
                          "description": "The ID of the team that the view belongs to"
                        },
                        "type": {
                          "type": "string",
                          "description": "The type of view"
                        },
                        "title": {
                          "type": "object",
                          "description": "The title of the view"
                        },
                        "submit": {
                          "type": "object",
                          "description": "The submit button of the view"
                        },
                        "blocks": {
                          "type": "array",
                          "description": "An array of blocks that defines the content of the view"
                        },
                        "private_metadata": {
                          "type": "string",
                          "description": "Custom string sent to your app in view_submission and block_actions events"
                        },
                        "callback_id": {
                          "type": "string",
                          "description": "An identifier for interactions and submissions of this view"
                        },
                        "external_id": {
                          "type": "string",
                          "description": "A custom identifier for the view"
                        },
                        "state": {
                          "type": "object",
                          "description": "The state of any interactive components in the view"
                        },
                        "hash": {
                          "type": "string",
                          "description": "A unique value used to ensure the correct view is being updated"
                        },
                        "clear_on_close": {
                          "type": "boolean",
                          "description": "Indicates if the view will be cleared on close"
                        },
                        "notify_on_close": {
                          "type": "boolean",
                          "description": "Indicates if a view_closed event will be sent on close"
                        },
                        "root_view_id": {
                          "type": "string",
                          "description": "The ID of the root view"
                        },
                        "app_id": {
                          "type": "string",
                          "description": "The ID of the app that created the view"
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot user that created the view"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "view"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error code",
                      "enum": [
                        "duplicate_external_id",
                        "exchanged_trigger_id",
                        "expired_trigger_id",
                        "invalid_trigger_id",
                        "view_too_large",
                        "not_authed",
                        "invalid_auth",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ]
                    },
                    "response_metadata": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of error messages"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "token_revoked"
                      ],
                      "description": "Error code for authentication issues"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "account_inactive",
                        "no_permission"
                      ],
                      "description": "Error code for permission issues"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ],
                      "description": "Error code for rate limiting"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code for server errors"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Error code for service unavailability"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/listChannels": {
      "post": {
        "operationId": "listChannels",
        "summary": "Lists all public and private channels in a Slack workspace.",
        "description": "The listChannels function retrieves information about all channel-like conversations in a Slack workspace, including public channels, private channels, direct messages, and multi-person direct messages. It returns an array of conversation objects, each containing detailed information about a specific channel or conversation.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listChannels sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the conversation."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the channel-like thing, without a leading hash sign."
                      },
                      "is_channel": {
                        "type": "boolean",
                        "description": "Indicates whether a conversation is a channel."
                      },
                      "is_group": {
                        "type": "boolean",
                        "description": "Means the channel is a private channel created before March 2021."
                      },
                      "is_im": {
                        "type": "boolean",
                        "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                      },
                      "is_mpim": {
                        "type": "boolean",
                        "description": "Represents an unnamed private conversation between multiple users."
                      },
                      "is_private": {
                        "type": "boolean",
                        "description": "Means the conversation is privileged between two or more members."
                      },
                      "created": {
                        "type": "integer",
                        "description": "Timestamp of when the conversation was created."
                      },
                      "creator": {
                        "type": "string",
                        "description": "The ID of the member that created this conversation."
                      },
                      "is_archived": {
                        "type": "boolean",
                        "description": "Indicates a conversation is archived, frozen in time."
                      },
                      "is_general": {
                        "type": "boolean",
                        "description": "Means the channel is the workspace's \"general\" discussion channel."
                      },
                      "unlinked": {
                        "type": "integer",
                        "description": "Unlinked status of the conversation."
                      },
                      "name_normalized": {
                        "type": "string",
                        "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                      },
                      "is_shared": {
                        "type": "boolean",
                        "description": "Means the conversation is in some way shared between multiple workspaces."
                      },
                      "is_frozen": {
                        "type": "boolean",
                        "description": "Indicates that the channel is frozen."
                      },
                      "is_org_shared": {
                        "type": "boolean",
                        "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                      },
                      "is_pending_ext_shared": {
                        "type": "boolean",
                        "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                      },
                      "pending_shared": {
                        "type": "array",
                        "description": "A list of team IDs that have been invited to the channel but have not yet joined.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "context_team_id": {
                        "type": "string",
                        "description": "The team ID of the team that this channel belongs to."
                      },
                      "updated": {
                        "type": "integer",
                        "description": "The timestamp, in milliseconds, when the channel settings were updated."
                      },
                      "parent_conversation": {
                        "type": "string",
                        "description": "The ID of the parent conversation. This is present for threaded messages."
                      },
                      "is_ext_shared": {
                        "type": "boolean",
                        "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                      },
                      "shared_team_ids": {
                        "type": "array",
                        "description": "A list of team IDs that are part of this shared channel.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "pending_connected_team_ids": {
                        "type": "array",
                        "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "is_member": {
                        "type": "boolean",
                        "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                      },
                      "topic": {
                        "type": "object",
                        "description": "Provides information about the channel topic.",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "creator": {
                            "type": "string"
                          },
                          "last_set": {
                            "type": "integer"
                          }
                        }
                      },
                      "purpose": {
                        "type": "object",
                        "description": "Provides information about the channel purpose.",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "creator": {
                            "type": "string"
                          },
                          "last_set": {
                            "type": "integer"
                          }
                        }
                      },
                      "previous_names": {
                        "type": "array",
                        "description": "A list of previous names for the channel.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "num_members": {
                        "type": "integer",
                        "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                      },
                      "last_read": {
                        "type": "integer",
                        "description": "The timestamp for the last message the calling user has read in this channel."
                      },
                      "latest": {
                        "type": "string",
                        "description": "The latest message in the channel."
                      },
                      "unread_count": {
                        "type": "integer",
                        "description": "A full count of visible messages that the calling user has yet to read."
                      },
                      "unread_count_display": {
                        "type": "integer",
                        "description": "A count of messages that the calling user has yet to read that matter to them."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The server understood the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/getChannelConversationInfo": {
      "post": {
        "operationId": "getChannelConversationInfo",
        "summary": "Retrieves detailed information about a specific Slack channel.",
        "description": "The getChannelConversationInfo function fetches comprehensive data about a specified Slack channel, including its properties, settings, and metadata. It provides insights into the channel's type, membership, sharing status, and other relevant attributes, allowing developers to access and utilize channel-specific information within their Slack integrations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getChannelConversationInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to get information about.",
                            "example": "C12345678"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with channel conversation information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing, without a leading hash sign."
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel."
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021."
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users."
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation."
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived, frozen in time."
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel."
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "Unlinked status of the channel."
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is in some way shared between multiple workspaces."
                        },
                        "is_frozen": {
                          "type": "boolean",
                          "description": "Indicates that the channel is frozen."
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                        },
                        "pending_shared": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                        },
                        "context_team_id": {
                          "type": "string",
                          "description": "The team ID of the team that this channel belongs to."
                        },
                        "updated": {
                          "type": "integer",
                          "description": "The timestamp, in milliseconds, when the channel settings were updated."
                        },
                        "parent_conversation": {
                          "type": "string",
                          "description": "The ID of the parent conversation. This is present for threaded messages."
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                        },
                        "shared_team_ids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of team IDs that are part of this shared channel."
                        },
                        "pending_connected_team_ids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted."
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                        },
                        "topic": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "creator": {
                              "type": "string"
                            },
                            "last_set": {
                              "type": "integer"
                            }
                          },
                          "description": "Provides information about the channel topic."
                        },
                        "purpose": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "creator": {
                              "type": "string"
                            },
                            "last_set": {
                              "type": "integer"
                            }
                          },
                          "description": "Provides information about the channel purpose."
                        },
                        "previous_names": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of previous names for the channel."
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                        },
                        "locale": {
                          "type": "string",
                          "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                        },
                        "last_read": {
                          "type": "integer",
                          "description": "The timestamp for the last message the calling user has read in this channel."
                        },
                        "latest": {
                          "type": "string",
                          "description": "The latest message in the channel."
                        },
                        "unread_count": {
                          "type": "integer",
                          "description": "A full count of visible messages that the calling user has yet to read."
                        },
                        "unread_count_display": {
                          "type": "integer",
                          "description": "A count of messages that the calling user has yet to read that matter to them."
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "is_channel"
                      ]
                    }
                  },
                  "required": [
                    "conversation"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid channel ID or other client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel does not exist or user doesn't have access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/listUsers": {
      "post": {
        "operationId": "listUsers",
        "summary": "Lists all users in a Slack workspace.",
        "description": "The listUsers function retrieves information about all users in a Slack workspace. It returns an array of user objects, each containing detailed information about a workspace user including their profile, permissions, and various attributes. This function is useful for obtaining a comprehensive overview of all users in a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listUsers sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Identifier for this workspace user. It is unique to the workspace containing the user."
                      },
                      "team_id": {
                        "type": "string",
                        "description": "The ID of the team the user belongs to."
                      },
                      "name": {
                        "type": "string",
                        "description": "The username of the user."
                      },
                      "deleted": {
                        "type": "boolean",
                        "description": "Indicates if the user has been deactivated."
                      },
                      "color": {
                        "type": "string",
                        "description": "Used in some clients to display a special username color."
                      },
                      "real_name": {
                        "type": "string",
                        "description": "The user's first and last name."
                      },
                      "tz": {
                        "type": "string",
                        "description": "A human-readable string for the geographic timezone-related region this user has specified in their account."
                      },
                      "tz_label": {
                        "type": "string",
                        "description": "Describes the commonly used name of the tz timezone."
                      },
                      "tz_offset": {
                        "type": "integer",
                        "description": "Indicates the number of seconds to offset UTC time by for this user's tz."
                      },
                      "profile": {
                        "type": "object",
                        "description": "The profile object contains the default fields of a user's workspace profile.",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "The user's title."
                          },
                          "phone": {
                            "type": "string",
                            "description": "The user's phone number, in any format."
                          },
                          "skype": {
                            "type": "string",
                            "description": "The user's Skype handle."
                          },
                          "real_name": {
                            "type": "string",
                            "description": "The user's first and last name."
                          },
                          "real_name_normalized": {
                            "type": "string",
                            "description": "The real_name field, but with any non-Latin characters filtered out."
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The display name the user has chosen to identify themselves by in their workspace profile."
                          },
                          "display_name_normalized": {
                            "type": "string",
                            "description": "The display_name field, but with any non-Latin characters filtered out."
                          },
                          "fields": {
                            "type": "object",
                            "description": "All the custom profile fields for the user."
                          },
                          "status_text": {
                            "type": "string",
                            "description": "The displayed text of up to 100 characters."
                          },
                          "status_emoji": {
                            "type": "string",
                            "description": "The displayed emoji that is enabled for the Slack team, such as :train:."
                          },
                          "status_expiration": {
                            "type": "integer",
                            "description": "The Unix timestamp of when the status will expire."
                          },
                          "avatar_hash": {
                            "type": "string",
                            "description": "A hash of the user's avatar."
                          },
                          "start_date": {
                            "type": "string",
                            "description": "The date the person joined the organization."
                          },
                          "image_original": {
                            "type": "string",
                            "description": "URL to the original size of the user's profile picture."
                          },
                          "is_custom_image": {
                            "type": "boolean",
                            "description": "Indicates if the user has a custom profile picture."
                          },
                          "email": {
                            "type": "string",
                            "description": "A valid email address. Requires users:read.email scope."
                          },
                          "pronouns": {
                            "type": "string",
                            "description": "The pronouns the user prefers to be addressed by."
                          },
                          "first_name": {
                            "type": "string",
                            "description": "The user's first name."
                          },
                          "last_name": {
                            "type": "string",
                            "description": "The user's last name."
                          },
                          "image_24": {
                            "type": "string",
                            "description": "URL to a 24x24 pixel version of the user's profile picture."
                          },
                          "image_32": {
                            "type": "string",
                            "description": "URL to a 32x32 pixel version of the user's profile picture."
                          },
                          "image_48": {
                            "type": "string",
                            "description": "URL to a 48x48 pixel version of the user's profile picture."
                          },
                          "image_72": {
                            "type": "string",
                            "description": "URL to a 72x72 pixel version of the user's profile picture."
                          },
                          "image_192": {
                            "type": "string",
                            "description": "URL to a 192x192 pixel version of the user's profile picture."
                          },
                          "image_512": {
                            "type": "string",
                            "description": "URL to a 512x512 pixel version of the user's profile picture."
                          },
                          "image_1024": {
                            "type": "string",
                            "description": "URL to a 1024x1024 pixel version of the user's profile picture."
                          },
                          "status_text_canonical": {
                            "type": "string"
                          },
                          "team": {
                            "type": "string",
                            "description": "The ID of the team the user is on."
                          }
                        }
                      },
                      "is_admin": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an Admin of the current workspace."
                      },
                      "is_owner": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an Owner of the current workspace."
                      },
                      "is_primary_owner": {
                        "type": "boolean",
                        "description": "Indicates whether the user is the Primary Owner of the current workspace."
                      },
                      "is_restricted": {
                        "type": "boolean",
                        "description": "Indicates whether or not the user is a guest user."
                      },
                      "is_ultra_restricted": {
                        "type": "boolean",
                        "description": "Indicates whether or not the user is a single-channel guest."
                      },
                      "is_bot": {
                        "type": "boolean",
                        "description": "Indicates whether the user is a bot user."
                      },
                      "is_app_user": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an authorized user of the calling app."
                      },
                      "updated": {
                        "type": "string",
                        "description": "A Unix timestamp indicating when the user object was last updated."
                      },
                      "is_email_confirmed": {
                        "type": "boolean",
                        "description": "Indicates if the user's email address has been confirmed."
                      },
                      "who_can_share_contact_card": {
                        "type": "string",
                        "description": "Who can share the user's contact card."
                      },
                      "enterprise_user": {
                        "type": "object",
                        "description": "An object containing info related to an Enterprise Grid user."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the bad request."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure or lack of permissions."
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating rate limiting."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/listChannelUsers": {
      "post": {
        "operationId": "listChannelUsers",
        "summary": "Lists all users in a specific Slack channel.",
        "description": "The listChannelUsers function retrieves a list of all user IDs for members of a specified Slack channel. It takes a single parameter, the channel ID, and returns an array of user IDs. This function is useful for obtaining information about channel membership and can be used for various channel management tasks.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listChannelUsers sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to get the members of.",
                            "example": "C12345678"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "User ID"
                  },
                  "description": "An array of user IDs representing the members of the channel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid channel ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Bot does not have permission to access the channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permission"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the channel was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/searchUser": {
      "post": {
        "operationId": "searchUser",
        "summary": "Search for a Slack user by their email address.",
        "description": "The searchUser function finds a user in a Slack workspace using their email address. It returns a comprehensive user object containing detailed information about the user, including their profile data, permissions, and various attributes related to their account and workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the searchUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The email address of the user to find.",
                            "example": "name@example.com"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Identifier for this workspace user"
                    },
                    "team_id": {
                      "type": "string",
                      "description": "The ID of the team the user belongs to"
                    },
                    "name": {
                      "type": "string",
                      "description": "The username of the user"
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "Indicates if the user has been deactivated"
                    },
                    "color": {
                      "type": "string",
                      "description": "Used in some clients to display a special username color"
                    },
                    "real_name": {
                      "type": "string",
                      "description": "The user's first and last name"
                    },
                    "tz": {
                      "type": "string",
                      "description": "A human-readable string for the geographic timezone-related region"
                    },
                    "tz_label": {
                      "type": "string",
                      "description": "Describes the commonly used name of the tz timezone"
                    },
                    "tz_offset": {
                      "type": "integer",
                      "description": "Indicates the number of seconds to offset UTC time by for this user's tz"
                    },
                    "profile": {
                      "type": "object",
                      "description": "The profile object contains the default fields of a user's workspace profile",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The user's title"
                        },
                        "phone": {
                          "type": "string",
                          "description": "The user's phone number, in any format"
                        },
                        "skype": {
                          "type": "string",
                          "description": "The user's Skype handle"
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's first and last name"
                        },
                        "real_name_normalized": {
                          "type": "string",
                          "description": "The real_name field, but with any non-Latin characters filtered out"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The display name the user has chosen to identify themselves by in their workspace profile"
                        },
                        "display_name_normalized": {
                          "type": "string",
                          "description": "The display_name field, but with any non-Latin characters filtered out"
                        },
                        "fields": {
                          "type": "object",
                          "description": "All the custom profile fields for the user"
                        },
                        "status_text": {
                          "type": "string",
                          "description": "The displayed text of up to 100 characters"
                        },
                        "status_emoji": {
                          "type": "string",
                          "description": "The displayed emoji that is enabled for the Slack team"
                        },
                        "status_expiration": {
                          "type": "integer",
                          "description": "The Unix timestamp of when the status will expire"
                        },
                        "avatar_hash": {
                          "type": "string",
                          "description": "A hash of the user's avatar"
                        },
                        "start_date": {
                          "type": "string",
                          "description": "The date the person joined the organization"
                        },
                        "image_original": {
                          "type": "string",
                          "description": "URL to the original size of the user's profile picture"
                        },
                        "is_custom_image": {
                          "type": "boolean",
                          "description": "Indicates if the user has a custom profile picture"
                        },
                        "email": {
                          "type": "string",
                          "description": "A valid email address. Requires users:read.email scope"
                        },
                        "pronouns": {
                          "type": "string",
                          "description": "The pronouns the user prefers to be addressed by"
                        },
                        "first_name": {
                          "type": "string",
                          "description": "The user's first name"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "The user's last name"
                        },
                        "image_24": {
                          "type": "string",
                          "description": "URL to a 24x24 pixel version of the user's profile picture"
                        },
                        "image_32": {
                          "type": "string",
                          "description": "URL to a 32x32 pixel version of the user's profile picture"
                        },
                        "image_48": {
                          "type": "string",
                          "description": "URL to a 48x48 pixel version of the user's profile picture"
                        },
                        "image_72": {
                          "type": "string",
                          "description": "URL to a 72x72 pixel version of the user's profile picture"
                        },
                        "image_192": {
                          "type": "string",
                          "description": "URL to a 192x192 pixel version of the user's profile picture"
                        },
                        "image_512": {
                          "type": "string",
                          "description": "URL to a 512x512 pixel version of the user's profile picture"
                        },
                        "image_1024": {
                          "type": "string",
                          "description": "URL to a 1024x1024 pixel version of the user's profile picture"
                        },
                        "status_text_canonical": {
                          "type": "string"
                        },
                        "team": {
                          "type": "string",
                          "description": "The ID of the team the user is on"
                        }
                      }
                    },
                    "is_admin": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an Admin of the current workspace"
                    },
                    "is_owner": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an Owner of the current workspace"
                    },
                    "is_primary_owner": {
                      "type": "boolean",
                      "description": "Indicates whether the user is the Primary Owner of the current workspace"
                    },
                    "is_restricted": {
                      "type": "boolean",
                      "description": "Indicates whether or not the user is a guest user"
                    },
                    "is_ultra_restricted": {
                      "type": "boolean",
                      "description": "Indicates whether or not the user is a single-channel guest"
                    },
                    "is_bot": {
                      "type": "boolean",
                      "description": "Indicates whether the user is a bot user"
                    },
                    "is_app_user": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an authorized user of the calling app"
                    },
                    "updated": {
                      "type": "string",
                      "description": "A Unix timestamp indicating when the user object was last updated"
                    },
                    "is_email_confirmed": {
                      "type": "boolean",
                      "description": "Indicates if the user's email address has been confirmed"
                    },
                    "who_can_share_contact_card": {
                      "type": "string",
                      "description": "Who can share the user's contact card"
                    },
                    "enterprise_user": {
                      "type": "object",
                      "description": "An object containing info related to an Enterprise Grid user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified user could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the user was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/searchChannel": {
      "post": {
        "operationId": "searchChannel",
        "summary": "Searches for a Slack channel by its name.",
        "description": "The searchChannel function finds a Slack channel by its name, performing a case-insensitive search. It returns a detailed conversation object if the channel is found, or undefined if no matching channel is located. This function is useful for retrieving comprehensive information about a specific Slack channel within a workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the searchChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The name of the channel to find (case-insensitive)."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with the found channel information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the conversation."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the channel-like thing, without a leading hash sign."
                    },
                    "is_channel": {
                      "type": "boolean",
                      "description": "Indicates whether a conversation is a channel."
                    },
                    "is_group": {
                      "type": "boolean",
                      "description": "Means the channel is a private channel created before March 2021."
                    },
                    "is_im": {
                      "type": "boolean",
                      "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                    },
                    "is_mpim": {
                      "type": "boolean",
                      "description": "Represents an unnamed private conversation between multiple users."
                    },
                    "is_private": {
                      "type": "boolean",
                      "description": "Means the conversation is privileged between two or more members."
                    },
                    "created": {
                      "type": "integer",
                      "description": "Timestamp of when the conversation was created."
                    },
                    "creator": {
                      "type": "string",
                      "description": "The ID of the member that created this conversation."
                    },
                    "is_archived": {
                      "type": "boolean",
                      "description": "Indicates a conversation is archived, frozen in time."
                    },
                    "is_general": {
                      "type": "boolean",
                      "description": "Means the channel is the workspace's \"general\" discussion channel."
                    },
                    "unlinked": {
                      "type": "integer"
                    },
                    "name_normalized": {
                      "type": "string",
                      "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                    },
                    "is_shared": {
                      "type": "boolean",
                      "description": "Means the conversation is in some way shared between multiple workspaces."
                    },
                    "is_frozen": {
                      "type": "boolean",
                      "description": "Indicates that the channel is frozen."
                    },
                    "is_org_shared": {
                      "type": "boolean",
                      "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                    },
                    "is_pending_ext_shared": {
                      "type": "boolean",
                      "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                    },
                    "pending_shared": {
                      "type": "array",
                      "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                    },
                    "context_team_id": {
                      "type": "string",
                      "description": "The team ID of the team that this channel belongs to."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "The timestamp, in milliseconds, when the channel settings were updated."
                    },
                    "parent_conversation": {
                      "type": "string",
                      "description": "The ID of the parent conversation. This is present for threaded messages."
                    },
                    "is_ext_shared": {
                      "type": "boolean",
                      "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                    },
                    "shared_team_ids": {
                      "type": "array",
                      "description": "A list of team IDs that are part of this shared channel."
                    },
                    "pending_connected_team_ids": {
                      "type": "array",
                      "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted."
                    },
                    "is_member": {
                      "type": "boolean",
                      "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                    },
                    "topic": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "creator": {
                          "type": "string"
                        },
                        "last_set": {
                          "type": "integer"
                        }
                      },
                      "description": "Provides information about the channel topic."
                    },
                    "purpose": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "creator": {
                          "type": "string"
                        },
                        "last_set": {
                          "type": "integer"
                        }
                      },
                      "description": "Provides information about the channel purpose."
                    },
                    "previous_names": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "A list of previous names for the channel."
                    },
                    "num_members": {
                      "type": "integer",
                      "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                    },
                    "locale": {
                      "type": "string",
                      "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                    },
                    "last_read": {
                      "type": "integer",
                      "description": "The timestamp for the last message the calling user has read in this channel."
                    },
                    "latest": {
                      "type": "string",
                      "description": "The latest message in the channel."
                    },
                    "unread_count": {
                      "type": "integer",
                      "description": "A full count of visible messages that the calling user has yet to read."
                    },
                    "unread_count_display": {
                      "type": "integer",
                      "description": "A count of messages that the calling user has yet to read that matter to them."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/messageUser": {
      "post": {
        "operationId": "messageUser",
        "summary": "Send a direct message to a Slack user.",
        "description": "The messageUser function allows sending a direct message to a specified Slack user using their user ID. It provides a simple way to programmatically send messages to individual users within a Slack workspace. The function returns details about the sent message, including its timestamp and the channel where it was posted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the messageUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the user to send the message to.",
                            "name": "userId"
                          },
                          {
                            "type": "string",
                            "description": "The text of the message to be sent.",
                            "name": "text"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message"
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message"
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message"
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message"
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message"
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "user_not_found"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "rate_limited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/messageChannel": {
      "post": {
        "operationId": "messageChannel",
        "summary": "Send a message to a specific Slack channel.",
        "description": "The messageChannel function allows sending a text message to a specified Slack channel using the channel ID. It returns details about the sent message, including its timestamp and channel information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the messageChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to send the message to."
                          },
                          {
                            "type": "string",
                            "description": "The text of the message to be sent."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted."
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message."
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message."
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message."
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message."
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message."
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments.",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/setReminder": {
      "post": {
        "operationId": "setReminder",
        "summary": "Sets a reminder for a user in Slack.",
        "description": "The setReminder function allows setting a reminder for a specified user in Slack. It takes the user ID, reminder text, and time as inputs, and returns the details of the created reminder. This function is useful for scheduling notifications or tasks for users within a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the setReminder sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the user to set the reminder for."
                          },
                          {
                            "type": "string",
                            "description": "The text of the reminder."
                          },
                          {
                            "type": "string",
                            "description": "A string describing when the reminder should fire (e.g., \"in 5 minutes\", \"at 10:30am\", or a Unix timestamp)."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "reminder": {
                      "type": "object",
                      "description": "An object containing the details of the created reminder.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the reminder."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the user who created the reminder."
                        },
                        "user": {
                          "type": "string",
                          "description": "The ID of the user the reminder is for."
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the reminder."
                        },
                        "recurring": {
                          "type": "boolean",
                          "description": "Whether the reminder is recurring."
                        },
                        "time": {
                          "type": "integer",
                          "description": "The timestamp of when the reminder will fire."
                        },
                        "complete_ts": {
                          "type": "integer",
                          "description": "The timestamp of when the reminder was completed."
                        }
                      },
                      "required": [
                        "id",
                        "creator",
                        "user",
                        "text",
                        "recurring",
                        "time"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "reminder"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/createChannel": {
      "post": {
        "operationId": "createChannel",
        "summary": "Creates a new public or private channel in Slack.",
        "description": "The createChannel function allows users to create a new channel in Slack, which can be either public or private. It takes the channel name as a required parameter and an optional boolean to specify if the channel should be private. The function returns a conversation object containing details of the newly created channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the createChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The name of the channel to create."
                          },
                          {
                            "type": "boolean",
                            "description": "Whether the channel should be private. Defaults to false.",
                            "default": false
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "channel": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing."
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel."
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021."
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users."
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation."
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived."
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel."
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel."
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced."
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel."
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first."
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation."
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic."
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose."
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel."
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation."
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "is_channel",
                        "is_private",
                        "created",
                        "creator"
                      ]
                    }
                  },
                  "required": [
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/reactMessage": {
      "post": {
        "operationId": "reactMessage",
        "summary": "Adds a reaction to a Slack message.",
        "description": "The reactMessage function allows adding an emoji reaction to a specific message in a Slack channel. It requires the channel ID, message timestamp, and the name of the emoji to use as the reaction. This function is part of the MicrofoxSlackClient and interacts with the Slack API to perform the reaction action.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reactMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel where the message is."
                          },
                          {
                            "type": "string",
                            "description": "The timestamp of the message to react to."
                          },
                          {
                            "type": "string",
                            "description": "The name of the emoji to use for the reaction (e.g., 'tada', 'thumbsup')."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    }
                  },
                  "required": [
                    "ok"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/getUserInfo": {
      "post": {
        "operationId": "getUserInfo",
        "summary": "Retrieves detailed information about a specific Slack user.",
        "description": "The getUserInfo function fetches comprehensive details about a Slack user, including their profile information, team association, and account status. It requires a user ID as input and returns a rich user object containing various attributes such as name, timezone, admin status, and profile details.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUserInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "name": "userId",
                            "in": "query",
                            "description": "The ID of the user to get information for.",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The user's ID."
                    },
                    "team_id": {
                      "type": "string",
                      "description": "The ID of the team the user belongs to."
                    },
                    "name": {
                      "type": "string",
                      "description": "The user's username."
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "true if the user has been deleted."
                    },
                    "color": {
                      "type": "string",
                      "description": "A hexadecimal color code that is used to color the user's name in Slack clients."
                    },
                    "real_name": {
                      "type": "string",
                      "description": "The user's real name."
                    },
                    "tz": {
                      "type": "string",
                      "description": "The user's timezone (e.g., America/Los_Angeles)."
                    },
                    "tz_label": {
                      "type": "string",
                      "description": "A human-readable string for the user's timezone."
                    },
                    "tz_offset": {
                      "type": "integer",
                      "description": "The user's timezone offset in seconds."
                    },
                    "profile": {
                      "type": "object",
                      "description": "A profile object containing more details about the user.",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The user's title."
                        },
                        "phone": {
                          "type": "string",
                          "description": "The user's phone number."
                        },
                        "skype": {
                          "type": "string",
                          "description": "The user's Skype username."
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's real name."
                        },
                        "real_name_normalized": {
                          "type": "string",
                          "description": "The user's real name, normalized."
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The user's display name."
                        },
                        "display_name_normalized": {
                          "type": "string",
                          "description": "The user's display name, normalized."
                        },
                        "status_text": {
                          "type": "string",
                          "description": "The user's status text."
                        },
                        "status_emoji": {
                          "type": "string",
                          "description": "The user's status emoji."
                        },
                        "avatar_hash": {
                          "type": "string",
                          "description": "A hash of the user's avatar image."
                        },
                        "image_original": {
                          "type": "string",
                          "description": "The URL of the user's original-sized profile image."
                        },
                        "image_24": {
                          "type": "string",
                          "description": "The URL of the user's 24x24 profile image."
                        },
                        "image_32": {
                          "type": "string",
                          "description": "The URL of the user's 32x32 profile image."
                        },
                        "image_48": {
                          "type": "string",
                          "description": "The URL of the user's 48x48 profile image."
                        },
                        "image_72": {
                          "type": "string",
                          "description": "The URL of the user's 72x72 profile image."
                        },
                        "image_192": {
                          "type": "string",
                          "description": "The URL of the user's 192x192 profile image."
                        },
                        "image_512": {
                          "type": "string",
                          "description": "The URL of the user's 512x512 profile image."
                        },
                        "team": {
                          "type": "string",
                          "description": "The ID of the team the user belongs to."
                        }
                      }
                    },
                    "is_admin": {
                      "type": "boolean",
                      "description": "true if the user is an admin."
                    },
                    "is_owner": {
                      "type": "boolean",
                      "description": "true if the user is an owner."
                    },
                    "is_primary_owner": {
                      "type": "boolean",
                      "description": "true if the user is the primary owner."
                    },
                    "is_restricted": {
                      "type": "boolean",
                      "description": "true if the user is a restricted user (single-channel guest)."
                    },
                    "is_ultra_restricted": {
                      "type": "boolean",
                      "description": "true if the user is an ultra-restricted user (multi-channel guest)."
                    },
                    "is_bot": {
                      "type": "boolean",
                      "description": "true if the user is a bot."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "A timestamp of when the user's profile was last updated."
                    },
                    "is_app_user": {
                      "type": "boolean",
                      "description": "true if the user is an app user."
                    },
                    "has_2fa": {
                      "type": "boolean",
                      "description": "true if the user has two-factor authentication enabled."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the user was not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/replyMessage": {
      "post": {
        "operationId": "replyMessage",
        "summary": "Send a threaded reply to a message in a Slack channel.",
        "description": "The replyMessage function allows sending a reply to a specific message in a Slack channel, creating or continuing a thread. It takes the channel ID, the timestamp of the message to reply to, and the text of the reply as parameters. The function returns details about the sent message, including its timestamp and channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the replyMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel where the message is."
                          },
                          {
                            "type": "string",
                            "description": "The timestamp of the message to reply to, which identifies the thread."
                          },
                          {
                            "type": "string",
                            "description": "The text of the reply."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted."
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message."
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message."
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message."
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message."
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message."
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments.",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/addUserToChannel": {
      "post": {
        "operationId": "addUserToChannel",
        "summary": "Invites a user to a Slack channel.",
        "description": "The addUserToChannel function adds a specified user to a given Slack channel. It takes the channel ID and user ID as parameters and returns a response object containing the result of the API call, including details about the channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the addUserToChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to invite the user to."
                          },
                          {
                            "type": "string",
                            "description": "The ID of the user to invite."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "object",
                      "description": "A conversation object with details on the channel.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing."
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel."
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021."
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users."
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation."
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived."
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel."
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel."
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced."
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel."
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first."
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation."
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic."
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose."
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel."
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation."
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/removeUserFromChannel": {
      "post": {
        "operationId": "removeUserFromChannel",
        "summary": "Removes a user from a Slack channel.",
        "description": "This function removes a specified user from a given Slack channel. It takes the channel ID and user ID as parameters and returns a boolean indicating the success of the operation. This method is useful for managing channel membership programmatically.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the removeUserFromChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to remove the user from.",
                            "example": "C12345678"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the user to remove.",
                            "example": "U87654321"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful."
                    }
                  },
                  "required": [
                    "ok"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized to remove the user from the channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permissions."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the resource was not found."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/sendFile": {
      "post": {
        "operationId": "sendFile",
        "summary": "Upload a file to a Slack channel.",
        "description": "The sendFile function allows users to upload a file to a specified Slack channel. It takes the channel ID, file content, filename, and an optional title as parameters. The function returns a detailed file object containing information about the uploaded file.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the sendFile sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to upload the file to. Can be a comma-separated list."
                          },
                          {
                            "type": "string",
                            "format": "binary",
                            "description": "A buffer containing the file content."
                          },
                          {
                            "type": "string",
                            "description": "The name of the file."
                          },
                          {
                            "type": "string",
                            "description": "A title for the file.",
                            "nullable": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "created": {
                          "type": "integer"
                        },
                        "timestamp": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "title": {
                          "type": "string"
                        },
                        "mimetype": {
                          "type": "string"
                        },
                        "filetype": {
                          "type": "string"
                        },
                        "pretty_type": {
                          "type": "string"
                        },
                        "user": {
                          "type": "string"
                        },
                        "editable": {
                          "type": "boolean"
                        },
                        "size": {
                          "type": "integer"
                        },
                        "mode": {
                          "type": "string",
                          "enum": [
                            "hosted",
                            "external",
                            "snippet",
                            "post"
                          ]
                        },
                        "is_external": {
                          "type": "boolean"
                        },
                        "external_type": {
                          "type": "string"
                        },
                        "is_public": {
                          "type": "boolean"
                        },
                        "public_url_shared": {
                          "type": "boolean"
                        },
                        "url_private": {
                          "type": "string"
                        },
                        "permalink": {
                          "type": "string"
                        },
                        "channels": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "ims": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "comments_count": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id",
                        "created",
                        "timestamp",
                        "title",
                        "mimetype",
                        "filetype",
                        "pretty_type",
                        "user",
                        "editable",
                        "size",
                        "mode",
                        "is_external",
                        "is_public",
                        "public_url_shared",
                        "url_private",
                        "permalink",
                        "channels",
                        "groups",
                        "ims",
                        "comments_count"
                      ]
                    }
                  },
                  "required": [
                    "file"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not allowed to upload to the specified channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large - File size exceeds limit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/getFileInfo": {
      "post": {
        "operationId": "getFileInfo",
        "summary": "Retrieves detailed information about a specific file in Slack.",
        "description": "The getFileInfo function fetches comprehensive metadata for a given file in Slack using its unique file ID. It returns a rich file object containing various attributes such as file properties, sharing details, and associated metadata. This function is essential for applications that need to access or display detailed file information within the Slack ecosystem.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getFileInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the file to get information for.",
                            "example": "F12345678"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with file information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the file object."
                        },
                        "created": {
                          "type": "integer",
                          "description": "A Unix timestamp representing when the file was created."
                        },
                        "timestamp": {
                          "type": "integer",
                          "description": "A deprecated property that is provided only for backwards compatibility with older clients."
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "description": "Name of the file; may be null for unnamed files."
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the file."
                        },
                        "mimetype": {
                          "type": "string",
                          "description": "The file's mimetype."
                        },
                        "filetype": {
                          "type": "string",
                          "description": "The file's type."
                        },
                        "pretty_type": {
                          "type": "string",
                          "description": "A human-readable version of the type."
                        },
                        "user": {
                          "type": "string",
                          "description": "The ID of the user who created the object."
                        },
                        "editable": {
                          "type": "boolean",
                          "description": "Indicates that files are stored in editable mode."
                        },
                        "size": {
                          "type": "integer",
                          "description": "The filesize in bytes."
                        },
                        "mode": {
                          "type": "string",
                          "enum": [
                            "hosted",
                            "external",
                            "snippet",
                            "post"
                          ],
                          "description": "The mode of the file."
                        },
                        "is_external": {
                          "type": "boolean",
                          "description": "Indicates whether the master copy of a file is stored within the system or not."
                        },
                        "external_type": {
                          "type": "string",
                          "description": "Indicates what kind of external file it is, e.g. 'dropbox' or 'gdoc'."
                        },
                        "is_public": {
                          "type": "boolean",
                          "description": "true if the file is public."
                        },
                        "public_url_shared": {
                          "type": "boolean",
                          "description": "true if the file's public URL has been shared."
                        },
                        "url_private": {
                          "type": "string",
                          "description": "A URL to the file contents. This requires an authorization header to access."
                        },
                        "permalink": {
                          "type": "string",
                          "description": "A URL to a page for the file containing details, comments and a download link."
                        },
                        "channels": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Contains the IDs of any channels into which the file is currently shared."
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Contains the IDs of any private groups into which the file is currently shared."
                        },
                        "ims": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Contains the IDs of any IM channels into which the file is currently shared."
                        },
                        "comments_count": {
                          "type": "integer",
                          "description": "The number of comments on the file."
                        }
                      },
                      "required": [
                        "id",
                        "created",
                        "user",
                        "size"
                      ]
                    }
                  },
                  "required": [
                    "file"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error (e.g., malformed request syntax, invalid file ID)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified file ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/addUserToChannel": {
      "post": {
        "operationId": "addUserToChannel",
        "summary": "Invites a user to a Slack channel.",
        "description": "The addUserToChannel function adds a specified user to a given Slack channel. It takes the channel ID and user ID as parameters and returns a response object containing the result of the API call, including details about the channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the addUserToChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to invite the user to."
                          },
                          {
                            "type": "string",
                            "description": "The ID of the user to invite."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "object",
                      "description": "A conversation object with details on the channel.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing."
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel."
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021."
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users."
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation."
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived."
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel."
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel."
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced."
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel."
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first."
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation."
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic."
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose."
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel."
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation."
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified channel or user does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/chat-postMessage": {
      "post": {
        "operationId": "chat.postMessage",
        "summary": "Sends a message to a Slack channel.",
        "description": "The chat.postMessage function allows sending a message to a specified Slack channel, private group, or IM channel. It supports various customization options including text formatting, attachments, blocks, and metadata. The function can be used to send simple text messages or create more interactive and rich content.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the chat.postMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Message configuration object",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "Channel, private group, or IM channel ID to send message to. Can be an encoded ID, or a channel name."
                              },
                              "text": {
                                "type": "string",
                                "description": "The formatted text of the message to be published. If blocks are included, this will be used as fallback text for notifications."
                              },
                              "attachments": {
                                "type": "string",
                                "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                              },
                              "blocks": {
                                "type": "string",
                                "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                              },
                              "as_user": {
                                "type": "boolean",
                                "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false."
                              },
                              "icon_emoji": {
                                "type": "string",
                                "description": "Emoji to use as the icon for this message. Overrides icon_url."
                              },
                              "icon_url": {
                                "type": "string",
                                "description": "URL to an image to use as the icon for this message."
                              },
                              "link_names": {
                                "type": "boolean",
                                "description": "Find and link user groups."
                              },
                              "mrkdwn": {
                                "type": "boolean",
                                "description": "Disable Slack markup parsing by setting to false. Enabled by default."
                              },
                              "metadata": {
                                "type": "string",
                                "description": "JSON object with event_type and event_payload fields, presented as a URL-encoded string."
                              },
                              "parse": {
                                "type": "string",
                                "description": "Change how messages are treated. Defaults to none."
                              },
                              "reply_broadcast": {
                                "type": "boolean",
                                "description": "Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false."
                              },
                              "thread_ts": {
                                "type": "string",
                                "description": "The ts value of another message to reply to."
                              },
                              "unfurl_links": {
                                "type": "boolean",
                                "description": "Pass true to enable unfurling of primarily text-based content."
                              },
                              "unfurl_media": {
                                "type": "boolean",
                                "description": "Pass false to disable unfurling of media content."
                              },
                              "username": {
                                "type": "string",
                                "description": "Set your bot's user name."
                              }
                            },
                            "required": [
                              "channel"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message"
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error code",
                      "enum": [
                        "channel_not_found",
                        "not_in_channel",
                        "is_archived",
                        "msg_too_long",
                        "no_text",
                        "too_many_attachments",
                        "rate_limited",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "token_expired",
                        "token_revoked"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "access_denied",
                        "not_allowed_token_type",
                        "ekm_access_denied",
                        "restricted_action"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "rate_limited"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/chat-update": {
      "post": {
        "operationId": "chat.update",
        "summary": "Updates an existing message in a Slack channel.",
        "description": "The chat.update method allows you to modify an existing message in a Slack channel. It's particularly useful for updating the status of long-running tasks or providing progressive information. The method supports updating the message text, adding structured blocks or attachments, and can be used with various options to control the message's appearance and behavior.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the chat.update sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Configuration object containing all function parameters",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "The ID of the conversation to update the message in."
                              },
                              "ts": {
                                "type": "string",
                                "description": "The timestamp of the message to be updated."
                              },
                              "text": {
                                "type": "string",
                                "description": "The new text for the message. Required if blocks and attachments are not provided."
                              },
                              "attachments": {
                                "type": "string",
                                "description": "A JSON-based array of structured attachments."
                              },
                              "blocks": {
                                "type": "array",
                                "description": "An array of structured blocks.",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "as_user": {
                                "type": "boolean",
                                "description": "Pass true to update the message as the authed user. Bot users are considered authed users."
                              },
                              "link_names": {
                                "type": "boolean",
                                "description": "Find and link channel names and usernames."
                              },
                              "parse": {
                                "type": "string",
                                "description": "Change how messages are treated. Defaults to client. Can be none or full.",
                                "enum": [
                                  "none",
                                  "full",
                                  "client"
                                ]
                              },
                              "metadata": {
                                "type": "string",
                                "description": "A JSON object with event_type and event_payload fields."
                              }
                            },
                            "required": [
                              "channel",
                              "ts"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted."
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    },
                    "text": {
                      "type": "string",
                      "description": "The new text of the message."
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message."
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "cant_update_message",
                        "channel_not_found",
                        "message_not_found",
                        "edit_window_closed",
                        "msg_too_long",
                        "no_text",
                        "as_user_not_supported",
                        "invalid_blocks",
                        "not_in_channel",
                        "is_archived",
                        "missing_scope",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "ratelimited"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "service_unavailable"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/conversations-history": {
      "post": {
        "operationId": "conversations.history",
        "summary": "Fetches a conversation's history of messages and events.",
        "description": "The conversations.history method retrieves the message and event history for a specified conversation (channel) in Slack. It allows for pagination, filtering by timestamp, and includes options for metadata inclusion. The method returns an array of message objects along with pagination information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.history sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Parameters for fetching conversation history",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "Conversation ID to fetch history for."
                              },
                              "cursor": {
                                "type": "string",
                                "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request."
                              },
                              "include_all_metadata": {
                                "type": "boolean",
                                "description": "Return all metadata associated with this message. Default false."
                              },
                              "inclusive": {
                                "type": "boolean",
                                "description": "Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified."
                              },
                              "latest": {
                                "type": "string",
                                "description": "Only messages before this Unix timestamp will be included in results."
                              },
                              "limit": {
                                "type": "integer",
                                "description": "The maximum number of items to return."
                              },
                              "oldest": {
                                "type": "string",
                                "description": "Only messages after this Unix timestamp will be included in results."
                              }
                            },
                            "required": [
                              "channel"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "messages": {
                      "type": "array",
                      "description": "An array of message objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of message."
                          },
                          "user": {
                            "type": "string",
                            "description": "The ID of the user who sent the message."
                          },
                          "text": {
                            "type": "string",
                            "description": "The text of the message."
                          },
                          "ts": {
                            "type": "string",
                            "description": "The timestamp of the message."
                          }
                        }
                      }
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "true if there are more messages to retrieve."
                    },
                    "pin_count": {
                      "type": "integer",
                      "description": "The number of pinned messages in the channel."
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found",
                        "invalid_cursor",
                        "invalid_ts_latest",
                        "invalid_ts_oldest",
                        "not_in_channel",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable",
                        "team_added_to_org"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/conversations-join": {
      "post": {
        "operationId": "conversations.join",
        "summary": "Join an existing public channel in Slack.",
        "description": "The conversations.join method allows a user or bot to join an existing public channel in a Slack workspace. This is essential for bots that need to be active in specific channels. The method requires a channel ID and returns detailed information about the joined channel upon success.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.join sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "The ID of the conversation to join."
                              }
                            },
                            "required": [
                              "channel"
                            ],
                            "description": "Configuration object containing the channel ID"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully joined the channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    },
                    "channel": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing"
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel"
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021"
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot"
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users"
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members"
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created"
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation"
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived"
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's 'general' discussion channel"
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel"
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced"
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel"
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization"
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization"
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined"
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first"
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation"
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic"
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose"
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel"
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found",
                        "is_archived",
                        "method_not_supported_for_channel_type",
                        "missing_scope",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission",
                        "user_is_restricted"
                      ],
                      "description": "Error code explaining the failure reason"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "accesslimited"
                      ],
                      "description": "Error code indicating rate limiting"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code indicating a server-side issue"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Error code indicating the service is temporarily unavailable"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/conversations-list": {
      "post": {
        "operationId": "conversations.list",
        "summary": "Retrieves a list of conversations (channels, private channels, DMs, and MPDMs) in a Slack workspace.",
        "description": "The conversations.list method allows you to fetch a list of conversations in a Slack workspace. It supports pagination and filtering options to customize the results. The method returns detailed information about each conversation, including its type, members, and various attributes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.list sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Configuration object containing all function parameters",
                            "properties": {
                              "cursor": {
                                "type": "string",
                                "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request."
                              },
                              "exclude_archived": {
                                "type": "boolean",
                                "description": "Set to true to exclude archived channels from the list. Default is false."
                              },
                              "limit": {
                                "type": "integer",
                                "description": "The maximum number of items to return. Must be an integer under 1000. Default is 100.",
                                "minimum": 1,
                                "maximum": 999
                              },
                              "team_id": {
                                "type": "string",
                                "description": "Required for org-wide apps."
                              },
                              "types": {
                                "type": "string",
                                "description": "A comma-separated list of conversation types to include. Types can be public_channel, private_channel, mpim, and im. Default is public_channel."
                              }
                            }
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channels": {
                      "type": "array",
                      "description": "An array of conversation objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the conversation"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the channel-like thing"
                          },
                          "is_channel": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is a channel"
                          },
                          "is_group": {
                            "type": "boolean",
                            "description": "Means the channel is a private channel created before March 2021"
                          },
                          "is_im": {
                            "type": "boolean",
                            "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot"
                          },
                          "is_mpim": {
                            "type": "boolean",
                            "description": "Represents an unnamed private conversation between multiple users"
                          },
                          "is_private": {
                            "type": "boolean",
                            "description": "Means the conversation is privileged between two or more members"
                          },
                          "created": {
                            "type": "integer",
                            "description": "Timestamp of when the conversation was created"
                          },
                          "creator": {
                            "type": "string",
                            "description": "The ID of the member that created this conversation"
                          },
                          "is_archived": {
                            "type": "boolean",
                            "description": "Indicates a conversation is archived"
                          },
                          "is_general": {
                            "type": "boolean",
                            "description": "Means the channel is the workspace's \"general\" discussion channel"
                          },
                          "unlinked": {
                            "type": "integer",
                            "description": "The number of members that have been removed from the channel"
                          },
                          "name_normalized": {
                            "type": "string",
                            "description": "The channel name, but with any special characters replaced"
                          },
                          "is_shared": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is part of a Shared Channel"
                          },
                          "is_ext_shared": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization"
                          },
                          "is_org_shared": {
                            "type": "boolean",
                            "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization"
                          },
                          "pending_shared": {
                            "type": "array",
                            "description": "A list of team IDs that have been invited to the channel but have not yet joined",
                            "items": {
                              "type": "string"
                            }
                          },
                          "is_pending_ext_shared": {
                            "type": "boolean",
                            "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first"
                          },
                          "is_member": {
                            "type": "boolean",
                            "description": "Indicates whether the user, bot user or Slack app is a member of the conversation"
                          },
                          "topic": {
                            "type": "object",
                            "description": "Provides information about the channel topic"
                          },
                          "purpose": {
                            "type": "object",
                            "description": "Provides information about the channel purpose"
                          },
                          "previous_names": {
                            "type": "array",
                            "description": "A list of previous names for the channel",
                            "items": {
                              "type": "string"
                            }
                          },
                          "num_members": {
                            "type": "integer",
                            "description": "The number of members in the conversation"
                          }
                        }
                      }
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information"
                    }
                  },
                  "required": [
                    "ok",
                    "channels"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_cursor",
                        "invalid_limit",
                        "invalid_types",
                        "method_not_supported_for_channel_type",
                        "invalid_arguments",
                        "invalid_arg_name"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_auth",
                        "not_authed",
                        "token_revoked"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "missing_scope",
                        "team_access_not_granted",
                        "access_denied",
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "rate_limited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/createChannel": {
      "post": {
        "operationId": "createChannel",
        "summary": "Creates a new public or private channel in Slack.",
        "description": "The createChannel function allows users to create a new channel in Slack, which can be either public or private. It takes the channel name as a required parameter and an optional boolean to specify if the channel should be private. The function returns a conversation object containing detailed information about the newly created channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the createChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The name of the channel to create."
                          },
                          {
                            "type": "boolean",
                            "description": "Whether the channel should be private. Defaults to false.",
                            "default": false
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "channel": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing."
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel."
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021."
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users."
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation."
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived."
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel."
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel."
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced."
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel."
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first."
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation."
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic."
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose."
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel."
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation."
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "is_channel",
                        "is_private",
                        "created",
                        "creator"
                      ]
                    }
                  },
                  "required": [
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/getChannelConversationInfo": {
      "post": {
        "operationId": "getChannelConversationInfo",
        "summary": "Retrieves detailed information about a specific Slack channel.",
        "description": "The getChannelConversationInfo function fetches comprehensive data about a specified Slack channel, including its properties, settings, and metadata. It provides insights into the channel's type, membership, sharing status, and other relevant attributes, allowing developers to access and utilize channel-specific information within their Slack integrations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getChannelConversationInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to get information about.",
                            "example": "C12345678"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with channel conversation information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing, without a leading hash sign."
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel."
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021."
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users."
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation."
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived, frozen in time."
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel."
                        },
                        "unlinked": {
                          "type": "integer"
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is in some way shared between multiple workspaces."
                        },
                        "is_frozen": {
                          "type": "boolean",
                          "description": "Indicates that the channel is frozen."
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                        },
                        "context_team_id": {
                          "type": "string",
                          "description": "The team ID of the team that this channel belongs to."
                        },
                        "updated": {
                          "type": "integer",
                          "description": "The timestamp, in milliseconds, when the channel settings were updated."
                        },
                        "parent_conversation": {
                          "type": "string",
                          "description": "The ID of the parent conversation. This is present for threaded messages."
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                        },
                        "shared_team_ids": {
                          "type": "array",
                          "description": "A list of team IDs that are part of this shared channel."
                        },
                        "pending_connected_team_ids": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted."
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                        },
                        "topic": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "creator": {
                              "type": "string"
                            },
                            "last_set": {
                              "type": "integer"
                            }
                          },
                          "description": "Provides information about the channel topic."
                        },
                        "purpose": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "creator": {
                              "type": "string"
                            },
                            "last_set": {
                              "type": "integer"
                            }
                          },
                          "description": "Provides information about the channel purpose."
                        },
                        "previous_names": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of previous names for the channel."
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                        },
                        "locale": {
                          "type": "string",
                          "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                        },
                        "last_read": {
                          "type": "integer",
                          "description": "The timestamp for the last message the calling user has read in this channel."
                        },
                        "latest": {
                          "type": "string",
                          "description": "The latest message in the channel."
                        },
                        "unread_count": {
                          "type": "integer",
                          "description": "A full count of visible messages that the calling user has yet to read."
                        },
                        "unread_count_display": {
                          "type": "integer",
                          "description": "A count of messages that the calling user has yet to read that matter to them."
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "is_channel"
                      ]
                    }
                  },
                  "required": [
                    "conversation"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid channel ID or other client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel does not exist or user doesn't have access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/getFileInfo": {
      "post": {
        "operationId": "getFileInfo",
        "summary": "Retrieves detailed information about a specific file in Slack.",
        "description": "The getFileInfo function fetches comprehensive metadata for a file identified by its unique ID. It returns a rich file object containing various attributes such as file properties, sharing details, and associated channel information. This function is essential for applications that need to access or display detailed file information within a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getFileInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the file to get information for.",
                            "example": "F12345678"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with file information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the file object."
                        },
                        "created": {
                          "type": "integer",
                          "description": "A Unix timestamp representing when the file was created."
                        },
                        "timestamp": {
                          "type": "integer",
                          "description": "A deprecated property that is provided only for backwards compatibility with older clients."
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "description": "Name of the file; may be null for unnamed files."
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the file."
                        },
                        "mimetype": {
                          "type": "string",
                          "description": "The file's mimetype."
                        },
                        "filetype": {
                          "type": "string",
                          "description": "The file's type."
                        },
                        "pretty_type": {
                          "type": "string",
                          "description": "A human-readable version of the type."
                        },
                        "user": {
                          "type": "string",
                          "description": "The ID of the user who created the object."
                        },
                        "editable": {
                          "type": "boolean",
                          "description": "Indicates that files are stored in editable mode."
                        },
                        "size": {
                          "type": "integer",
                          "description": "The filesize in bytes."
                        },
                        "mode": {
                          "type": "string",
                          "enum": [
                            "hosted",
                            "external",
                            "snippet",
                            "post"
                          ],
                          "description": "The mode of the file."
                        },
                        "is_external": {
                          "type": "boolean",
                          "description": "Indicates whether the master copy of a file is stored within the system or not."
                        },
                        "external_type": {
                          "type": "string",
                          "description": "Indicates what kind of external file it is, e.g. 'dropbox' or 'gdoc'."
                        },
                        "is_public": {
                          "type": "boolean",
                          "description": "true if the file is public."
                        },
                        "public_url_shared": {
                          "type": "boolean",
                          "description": "true if the file's public URL has been shared."
                        },
                        "url_private": {
                          "type": "string",
                          "description": "A URL to the file contents. This requires an authorization header to access."
                        },
                        "permalink": {
                          "type": "string",
                          "description": "A URL to a page for the file containing details, comments and a download link."
                        },
                        "channels": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Contains the IDs of any channels into which the file is currently shared."
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Contains the IDs of any private groups into which the file is currently shared."
                        },
                        "ims": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Contains the IDs of any IM channels into which the file is currently shared."
                        },
                        "comments_count": {
                          "type": "integer",
                          "description": "The number of comments on the file."
                        }
                      },
                      "required": [
                        "id",
                        "created",
                        "user",
                        "size"
                      ]
                    }
                  },
                  "required": [
                    "file"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error (e.g., malformed request syntax, invalid file ID)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified file could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/getUserInfo": {
      "post": {
        "operationId": "getUserInfo",
        "summary": "Retrieves detailed information about a specific Slack user.",
        "description": "The getUserInfo function fetches comprehensive details about a Slack user using their unique user ID. It returns a user object containing various attributes such as profile information, team association, account status, and role-specific flags. This function is essential for applications that need to access or display user-specific data within a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUserInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "name": "userId",
                            "type": "string",
                            "description": "The ID of the user to get information for.",
                            "required": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The user's ID."
                    },
                    "team_id": {
                      "type": "string",
                      "description": "The ID of the team the user belongs to."
                    },
                    "name": {
                      "type": "string",
                      "description": "The user's username."
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "true if the user has been deleted."
                    },
                    "color": {
                      "type": "string",
                      "description": "A hexadecimal color code that is used to color the user's name in Slack clients."
                    },
                    "real_name": {
                      "type": "string",
                      "description": "The user's real name."
                    },
                    "tz": {
                      "type": "string",
                      "description": "The user's timezone (e.g., America/Los_Angeles)."
                    },
                    "tz_label": {
                      "type": "string",
                      "description": "A human-readable string for the user's timezone."
                    },
                    "tz_offset": {
                      "type": "integer",
                      "description": "The user's timezone offset in seconds."
                    },
                    "profile": {
                      "type": "object",
                      "description": "A profile object containing more details about the user.",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The user's title."
                        },
                        "phone": {
                          "type": "string",
                          "description": "The user's phone number."
                        },
                        "skype": {
                          "type": "string",
                          "description": "The user's Skype username."
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's real name."
                        },
                        "real_name_normalized": {
                          "type": "string",
                          "description": "The user's real name, normalized."
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The user's display name."
                        },
                        "display_name_normalized": {
                          "type": "string",
                          "description": "The user's display name, normalized."
                        },
                        "status_text": {
                          "type": "string",
                          "description": "The user's status text."
                        },
                        "status_emoji": {
                          "type": "string",
                          "description": "The user's status emoji."
                        },
                        "avatar_hash": {
                          "type": "string",
                          "description": "A hash of the user's avatar image."
                        },
                        "image_original": {
                          "type": "string",
                          "description": "The URL of the user's original-sized profile image."
                        },
                        "image_24": {
                          "type": "string",
                          "description": "The URL of the user's 24x24 profile image."
                        },
                        "image_32": {
                          "type": "string",
                          "description": "The URL of the user's 32x32 profile image."
                        },
                        "image_48": {
                          "type": "string",
                          "description": "The URL of the user's 48x48 profile image."
                        },
                        "image_72": {
                          "type": "string",
                          "description": "The URL of the user's 72x72 profile image."
                        },
                        "image_192": {
                          "type": "string",
                          "description": "The URL of the user's 192x192 profile image."
                        },
                        "image_512": {
                          "type": "string",
                          "description": "The URL of the user's 512x512 profile image."
                        },
                        "team": {
                          "type": "string",
                          "description": "The ID of the team the user belongs to."
                        }
                      }
                    },
                    "is_admin": {
                      "type": "boolean",
                      "description": "true if the user is an admin."
                    },
                    "is_owner": {
                      "type": "boolean",
                      "description": "true if the user is an owner."
                    },
                    "is_primary_owner": {
                      "type": "boolean",
                      "description": "true if the user is the primary owner."
                    },
                    "is_restricted": {
                      "type": "boolean",
                      "description": "true if the user is a restricted user (single-channel guest)."
                    },
                    "is_ultra_restricted": {
                      "type": "boolean",
                      "description": "true if the user is an ultra-restricted user (multi-channel guest)."
                    },
                    "is_bot": {
                      "type": "boolean",
                      "description": "true if the user is a bot."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "A timestamp of when the user's profile was last updated."
                    },
                    "is_app_user": {
                      "type": "boolean",
                      "description": "true if the user is an app user."
                    },
                    "has_2fa": {
                      "type": "boolean",
                      "description": "true if the user has two-factor authentication enabled."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the user was not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/listChannelUsers": {
      "post": {
        "operationId": "listChannelUsers",
        "summary": "Lists all users in a specific Slack channel.",
        "description": "The listChannelUsers function retrieves a list of all user IDs for members of a specified Slack channel. It takes a single parameter, the channel ID, and returns an array of user IDs. This function is useful for obtaining information about channel membership and can be used for various channel management tasks.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listChannelUsers sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to get the members of.",
                            "example": "C12345678"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "User ID"
                  },
                  "description": "An array of user IDs representing the members of the specified channel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid channel ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Bot does not have permission to access the channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permission to access the channel"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the specified channel was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/listChannels": {
      "post": {
        "operationId": "listChannels",
        "summary": "Lists all public and private channels in a Slack workspace.",
        "description": "The listChannels function retrieves information about all channel-like conversations in a Slack workspace, including public channels, private channels, direct messages, and multi-person direct messages. It returns detailed information about each conversation, such as its ID, name, type, creation timestamp, and various properties indicating its status and characteristics.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listChannels sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the conversation."
                      },
                      "name": {
                        "type": "string",
                        "description": "Indicates the name of the channel-like thing, without a leading hash sign."
                      },
                      "is_channel": {
                        "type": "boolean",
                        "description": "Indicates whether a conversation is a channel."
                      },
                      "is_group": {
                        "type": "boolean",
                        "description": "Means the channel is a private channel created before March 2021."
                      },
                      "is_im": {
                        "type": "boolean",
                        "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                      },
                      "is_mpim": {
                        "type": "boolean",
                        "description": "Represents an unnamed private conversation between multiple users."
                      },
                      "is_private": {
                        "type": "boolean",
                        "description": "Means the conversation is privileged between two or more members."
                      },
                      "created": {
                        "type": "integer",
                        "description": "Timestamp of when the conversation was created."
                      },
                      "creator": {
                        "type": "string",
                        "description": "The ID of the member that created this conversation."
                      },
                      "is_archived": {
                        "type": "boolean",
                        "description": "Indicates a conversation is archived, frozen in time."
                      },
                      "is_general": {
                        "type": "boolean",
                        "description": "Means the channel is the workspace's \"general\" discussion channel."
                      },
                      "unlinked": {
                        "type": "integer"
                      },
                      "name_normalized": {
                        "type": "string",
                        "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                      },
                      "is_shared": {
                        "type": "boolean",
                        "description": "Means the conversation is in some way shared between multiple workspaces."
                      },
                      "is_frozen": {
                        "type": "boolean",
                        "description": "Indicates that the channel is frozen."
                      },
                      "is_org_shared": {
                        "type": "boolean",
                        "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                      },
                      "is_pending_ext_shared": {
                        "type": "boolean",
                        "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                      },
                      "pending_shared": {
                        "type": "array",
                        "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                      },
                      "context_team_id": {
                        "type": "string",
                        "description": "The team ID of the team that this channel belongs to."
                      },
                      "updated": {
                        "type": "integer",
                        "description": "The timestamp, in milliseconds, when the channel settings were updated."
                      },
                      "parent_conversation": {
                        "type": "string",
                        "description": "The ID of the parent conversation. This is present for threaded messages."
                      },
                      "is_ext_shared": {
                        "type": "boolean",
                        "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                      },
                      "shared_team_ids": {
                        "type": "array",
                        "description": "A list of team IDs that are part of this shared channel."
                      },
                      "pending_connected_team_ids": {
                        "type": "array",
                        "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted."
                      },
                      "is_member": {
                        "type": "boolean",
                        "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                      },
                      "topic": {
                        "type": "object",
                        "description": "Provides information about the channel topic.",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "creator": {
                            "type": "string"
                          },
                          "last_set": {
                            "type": "integer"
                          }
                        }
                      },
                      "purpose": {
                        "type": "object",
                        "description": "Provides information about the channel purpose.",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "creator": {
                            "type": "string"
                          },
                          "last_set": {
                            "type": "integer"
                          }
                        }
                      },
                      "previous_names": {
                        "type": "array",
                        "description": "A list of previous names for the channel."
                      },
                      "num_members": {
                        "type": "integer",
                        "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                      },
                      "last_read": {
                        "type": "integer",
                        "description": "The timestamp for the last message the calling user has read in this channel."
                      },
                      "latest": {
                        "type": "string",
                        "description": "The latest message in the channel."
                      },
                      "unread_count": {
                        "type": "integer",
                        "description": "A full count of visible messages that the calling user has yet to read."
                      },
                      "unread_count_display": {
                        "type": "integer",
                        "description": "A count of messages that the calling user has yet to read that matter to them."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The server understood the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/listUsers": {
      "post": {
        "operationId": "listUsers",
        "summary": "Lists all users in a Slack workspace.",
        "description": "The listUsers function retrieves information about all users in a Slack workspace. It returns an array of user objects, each containing detailed information about a workspace user including their profile, permissions, and various attributes. This function is useful for obtaining a comprehensive overview of all users in a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listUsers sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": []
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Identifier for this workspace user. It is unique to the workspace containing the user."
                      },
                      "team_id": {
                        "type": "string",
                        "description": "The ID of the team the user belongs to."
                      },
                      "name": {
                        "type": "string",
                        "description": "The username of the user."
                      },
                      "deleted": {
                        "type": "boolean",
                        "description": "Indicates if the user has been deactivated."
                      },
                      "color": {
                        "type": "string",
                        "description": "Used in some clients to display a special username color."
                      },
                      "real_name": {
                        "type": "string",
                        "description": "The user's first and last name."
                      },
                      "tz": {
                        "type": "string",
                        "description": "A human-readable string for the geographic timezone-related region this user has specified in their account."
                      },
                      "tz_label": {
                        "type": "string",
                        "description": "Describes the commonly used name of the tz timezone."
                      },
                      "tz_offset": {
                        "type": "integer",
                        "description": "Indicates the number of seconds to offset UTC time by for this user's tz."
                      },
                      "profile": {
                        "type": "object",
                        "description": "The profile object contains the default fields of a user's workspace profile.",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "The user's title."
                          },
                          "phone": {
                            "type": "string",
                            "description": "The user's phone number, in any format."
                          },
                          "skype": {
                            "type": "string",
                            "description": "The user's Skype handle."
                          },
                          "real_name": {
                            "type": "string",
                            "description": "The user's first and last name."
                          },
                          "real_name_normalized": {
                            "type": "string",
                            "description": "The real_name field, but with any non-Latin characters filtered out."
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The display name the user has chosen to identify themselves by in their workspace profile."
                          },
                          "display_name_normalized": {
                            "type": "string",
                            "description": "The display_name field, but with any non-Latin characters filtered out."
                          },
                          "fields": {
                            "type": "object",
                            "description": "All the custom profile fields for the user."
                          },
                          "status_text": {
                            "type": "string",
                            "description": "The displayed text of up to 100 characters."
                          },
                          "status_emoji": {
                            "type": "string",
                            "description": "The displayed emoji that is enabled for the Slack team, such as :train:."
                          },
                          "status_expiration": {
                            "type": "integer",
                            "description": "The Unix timestamp of when the status will expire."
                          },
                          "avatar_hash": {
                            "type": "string",
                            "description": "A hash of the user's avatar."
                          },
                          "start_date": {
                            "type": "string",
                            "description": "The date the person joined the organization."
                          },
                          "image_original": {
                            "type": "string",
                            "description": "URL to the original size of the user's profile picture."
                          },
                          "is_custom_image": {
                            "type": "boolean",
                            "description": "Indicates if the user has a custom profile picture."
                          },
                          "email": {
                            "type": "string",
                            "description": "A valid email address. Requires users:read.email scope."
                          },
                          "pronouns": {
                            "type": "string",
                            "description": "The pronouns the user prefers to be addressed by."
                          },
                          "first_name": {
                            "type": "string",
                            "description": "The user's first name."
                          },
                          "last_name": {
                            "type": "string",
                            "description": "The user's last name."
                          },
                          "image_24": {
                            "type": "string",
                            "description": "URL to a 24x24 pixel version of the user's profile picture."
                          },
                          "image_32": {
                            "type": "string",
                            "description": "URL to a 32x32 pixel version of the user's profile picture."
                          },
                          "image_48": {
                            "type": "string",
                            "description": "URL to a 48x48 pixel version of the user's profile picture."
                          },
                          "image_72": {
                            "type": "string",
                            "description": "URL to a 72x72 pixel version of the user's profile picture."
                          },
                          "image_192": {
                            "type": "string",
                            "description": "URL to a 192x192 pixel version of the user's profile picture."
                          },
                          "image_512": {
                            "type": "string",
                            "description": "URL to a 512x512 pixel version of the user's profile picture."
                          },
                          "image_1024": {
                            "type": "string",
                            "description": "URL to a 1024x1024 pixel version of the user's profile picture."
                          },
                          "status_text_canonical": {
                            "type": "string"
                          },
                          "team": {
                            "type": "string",
                            "description": "The ID of the team the user is on."
                          }
                        }
                      },
                      "is_admin": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an Admin of the current workspace."
                      },
                      "is_owner": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an Owner of the current workspace."
                      },
                      "is_primary_owner": {
                        "type": "boolean",
                        "description": "Indicates whether the user is the Primary Owner of the current workspace."
                      },
                      "is_restricted": {
                        "type": "boolean",
                        "description": "Indicates whether or not the user is a guest user."
                      },
                      "is_ultra_restricted": {
                        "type": "boolean",
                        "description": "Indicates whether or not the user is a single-channel guest."
                      },
                      "is_bot": {
                        "type": "boolean",
                        "description": "Indicates whether the user is a bot user."
                      },
                      "is_app_user": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an authorized user of the calling app."
                      },
                      "updated": {
                        "type": "string",
                        "description": "A Unix timestamp indicating when the user object was last updated."
                      },
                      "is_email_confirmed": {
                        "type": "boolean",
                        "description": "Indicates if the user's email address has been confirmed."
                      },
                      "who_can_share_contact_card": {
                        "type": "string",
                        "description": "Who can share the user's contact card."
                      },
                      "enterprise_user": {
                        "type": "object",
                        "description": "An object containing info related to an Enterprise Grid user."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the bad request."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure or lack of permissions."
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating rate limiting."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/messageChannel": {
      "post": {
        "operationId": "messageChannel",
        "summary": "Send a message to a specific Slack channel.",
        "description": "The messageChannel function allows sending a text message to a specified Slack channel using the channel ID. It returns details about the sent message, including the timestamp and message object. This function is part of the MicrofoxSlackClient and requires a valid Slack bot token to operate.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the messageChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to send the message to."
                          },
                          {
                            "type": "string",
                            "description": "The text of the message."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted."
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message."
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message."
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message."
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message."
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message."
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments.",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/messageUser": {
      "post": {
        "operationId": "messageUser",
        "summary": "Send a direct message to a Slack user.",
        "description": "The messageUser function allows sending a direct message to a specified Slack user using their user ID. It provides a simple way to programmatically send messages to individual users within a Slack workspace. The function returns details about the sent message, including its timestamp and the channel where it was posted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the messageUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the user to send the message to."
                          },
                          {
                            "type": "string",
                            "description": "The text of the message to be sent."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted."
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message."
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message."
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message."
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message."
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message."
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments.",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/reactMessage": {
      "post": {
        "operationId": "reactMessage",
        "summary": "Adds a reaction to a Slack message.",
        "description": "The reactMessage function allows adding an emoji reaction to a specific message in a Slack channel. It requires the channel ID, message timestamp, and the name of the emoji to use as the reaction. This function is part of the MicrofoxSlackClient and interacts with the Slack API to perform the reaction action.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reactMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel where the message is."
                          },
                          {
                            "type": "string",
                            "description": "The timestamp of the message to react to."
                          },
                          {
                            "type": "string",
                            "description": "The name of the emoji to use for the reaction (e.g., 'tada', 'thumbsup')."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    }
                  },
                  "required": [
                    "ok"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/reactions-add": {
      "post": {
        "operationId": "reactions.add",
        "summary": "Adds a reaction (emoji) to a message in a Slack channel.",
        "description": "The reactions.add function allows users to add an emoji reaction to a specific message in a Slack channel. It requires the channel ID, the timestamp of the message, and the name of the reaction (emoji) to be added. This function is useful for providing quick, non-verbal feedback or responses to messages in Slack conversations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reactions.add sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "description": "Configuration object containing all function parameters",
                            "properties": {
                              "channel": {
                                "type": "string",
                                "description": "Channel where the message to add reaction to was posted"
                              },
                              "name": {
                                "type": "string",
                                "description": "Reaction (emoji) name"
                              },
                              "timestamp": {
                                "type": "string",
                                "description": "Timestamp of the message to add reaction to"
                              }
                            },
                            "required": [
                              "channel",
                              "name",
                              "timestamp"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error code",
                      "enum": [
                        "already_reacted",
                        "bad_timestamp",
                        "channel_not_found",
                        "invalid_name",
                        "is_archived",
                        "message_not_found",
                        "no_item_specified",
                        "not_reactable",
                        "thread_locked",
                        "too_many_emoji",
                        "too_many_reactions",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable",
                        "team_added_to_org"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/removeUserFromChannel": {
      "post": {
        "operationId": "removeUserFromChannel",
        "summary": "Removes a user from a Slack channel.",
        "description": "This function removes a specified user from a given Slack channel. It takes the channel ID and user ID as parameters and returns a boolean indicating the success of the operation. This method is useful for managing channel membership programmatically.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the removeUserFromChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to remove the user from.",
                            "example": "C12345678"
                          },
                          {
                            "type": "string",
                            "description": "The ID of the user to remove.",
                            "example": "U87654321"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful."
                    }
                  },
                  "required": [
                    "ok"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized to remove the user from the channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permissions."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the resource was not found."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/replyMessage": {
      "post": {
        "operationId": "replyMessage",
        "summary": "Send a threaded reply to a message in a Slack channel.",
        "description": "The replyMessage function allows sending a reply to a specific message in a Slack channel, creating or continuing a thread. It takes the channel ID, the timestamp of the message to reply to, and the text of the reply as parameters. The function returns details about the sent message, including its timestamp and channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the replyMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel where the message is."
                          },
                          {
                            "type": "string",
                            "description": "The timestamp of the message to reply to, which identifies the thread."
                          },
                          {
                            "type": "string",
                            "description": "The text of the reply."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted."
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message."
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message."
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message."
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message."
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message."
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments.",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/searchChannel": {
      "post": {
        "operationId": "searchChannel",
        "summary": "Searches for a Slack channel by its name.",
        "description": "The searchChannel function finds a Slack channel by its name, performing a case-insensitive search. It returns a detailed conversation object if the channel is found, or undefined if no matching channel is located. This function is useful for retrieving comprehensive information about a specific Slack channel within a workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the searchChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The name of the channel to find (case-insensitive)."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the conversation."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the channel-like thing, without a leading hash sign."
                    },
                    "is_channel": {
                      "type": "boolean",
                      "description": "Indicates whether a conversation is a channel."
                    },
                    "is_group": {
                      "type": "boolean",
                      "description": "Means the channel is a private channel created before March 2021."
                    },
                    "is_im": {
                      "type": "boolean",
                      "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                    },
                    "is_mpim": {
                      "type": "boolean",
                      "description": "Represents an unnamed private conversation between multiple users."
                    },
                    "is_private": {
                      "type": "boolean",
                      "description": "Means the conversation is privileged between two or more members."
                    },
                    "created": {
                      "type": "integer",
                      "description": "Timestamp of when the conversation was created."
                    },
                    "creator": {
                      "type": "string",
                      "description": "The ID of the member that created this conversation."
                    },
                    "is_archived": {
                      "type": "boolean",
                      "description": "Indicates a conversation is archived, frozen in time."
                    },
                    "is_general": {
                      "type": "boolean",
                      "description": "Means the channel is the workspace's \"general\" discussion channel."
                    },
                    "unlinked": {
                      "type": "integer"
                    },
                    "name_normalized": {
                      "type": "string",
                      "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                    },
                    "is_shared": {
                      "type": "boolean",
                      "description": "Means the conversation is in some way shared between multiple workspaces."
                    },
                    "is_frozen": {
                      "type": "boolean",
                      "description": "Indicates that the channel is frozen."
                    },
                    "is_org_shared": {
                      "type": "boolean",
                      "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                    },
                    "is_pending_ext_shared": {
                      "type": "boolean",
                      "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                    },
                    "pending_shared": {
                      "type": "array",
                      "description": "A list of team IDs that have been invited to the channel but have not yet joined."
                    },
                    "context_team_id": {
                      "type": "string",
                      "description": "The team ID of the team that this channel belongs to."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "The timestamp, in milliseconds, when the channel settings were updated."
                    },
                    "parent_conversation": {
                      "type": "string",
                      "description": "The ID of the parent conversation. This is present for threaded messages."
                    },
                    "is_ext_shared": {
                      "type": "boolean",
                      "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                    },
                    "shared_team_ids": {
                      "type": "array",
                      "description": "A list of team IDs that are part of this shared channel."
                    },
                    "pending_connected_team_ids": {
                      "type": "array",
                      "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted."
                    },
                    "is_member": {
                      "type": "boolean",
                      "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                    },
                    "topic": {
                      "type": "object",
                      "description": "Provides information about the channel topic.",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "creator": {
                          "type": "string"
                        },
                        "last_set": {
                          "type": "integer"
                        }
                      }
                    },
                    "purpose": {
                      "type": "object",
                      "description": "Provides information about the channel purpose.",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "creator": {
                          "type": "string"
                        },
                        "last_set": {
                          "type": "integer"
                        }
                      }
                    },
                    "previous_names": {
                      "type": "array",
                      "description": "A list of previous names for the channel."
                    },
                    "num_members": {
                      "type": "integer",
                      "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                    },
                    "locale": {
                      "type": "string",
                      "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                    },
                    "last_read": {
                      "type": "integer",
                      "description": "The timestamp for the last message the calling user has read in this channel."
                    },
                    "latest": {
                      "type": "string",
                      "description": "The latest message in the channel."
                    },
                    "unread_count": {
                      "type": "integer",
                      "description": "A full count of visible messages that the calling user has yet to read."
                    },
                    "unread_count_display": {
                      "type": "integer",
                      "description": "A count of messages that the calling user has yet to read that matter to them."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error (e.g., malformed request syntax).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the bad request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The requested channel was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the channel was not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/searchUser": {
      "post": {
        "operationId": "searchUser",
        "summary": "Search for a Slack user by their email address.",
        "description": "The searchUser function finds a user in a Slack workspace using their email address. It returns a detailed user object containing information about the user, including their profile, permissions, and various attributes. This function is useful for retrieving user information programmatically within Slack integrations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the searchUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The email address of the user to find.",
                            "example": "name@example.com"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Identifier for this workspace user. It is unique to the workspace containing the user."
                    },
                    "team_id": {
                      "type": "string",
                      "description": "The ID of the team the user belongs to."
                    },
                    "name": {
                      "type": "string",
                      "description": "The username of the user."
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "Indicates if the user has been deactivated."
                    },
                    "color": {
                      "type": "string",
                      "description": "Used in some clients to display a special username color."
                    },
                    "real_name": {
                      "type": "string",
                      "description": "The user's first and last name."
                    },
                    "tz": {
                      "type": "string",
                      "description": "A human-readable string for the geographic timezone-related region this user has specified in their account."
                    },
                    "tz_label": {
                      "type": "string",
                      "description": "Describes the commonly used name of the tz timezone."
                    },
                    "tz_offset": {
                      "type": "integer",
                      "description": "Indicates the number of seconds to offset UTC time by for this user's tz."
                    },
                    "profile": {
                      "type": "object",
                      "description": "The profile object contains the default fields of a user's workspace profile.",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The user's title."
                        },
                        "phone": {
                          "type": "string",
                          "description": "The user's phone number, in any format."
                        },
                        "skype": {
                          "type": "string",
                          "description": "The user's Skype handle."
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's first and last name."
                        },
                        "real_name_normalized": {
                          "type": "string",
                          "description": "The real_name field, but with any non-Latin characters filtered out."
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The display name the user has chosen to identify themselves by in their workspace profile."
                        },
                        "display_name_normalized": {
                          "type": "string",
                          "description": "The display_name field, but with any non-Latin characters filtered out."
                        },
                        "fields": {
                          "type": "object",
                          "description": "All the custom profile fields for the user."
                        },
                        "status_text": {
                          "type": "string",
                          "description": "The displayed text of up to 100 characters."
                        },
                        "status_emoji": {
                          "type": "string",
                          "description": "The displayed emoji that is enabled for the Slack team, such as :train:."
                        },
                        "status_expiration": {
                          "type": "integer",
                          "description": "The Unix timestamp of when the status will expire."
                        },
                        "avatar_hash": {
                          "type": "string",
                          "description": "A hash of the user's avatar."
                        },
                        "start_date": {
                          "type": "string",
                          "description": "The date the person joined the organization."
                        },
                        "image_original": {
                          "type": "string",
                          "description": "URL to the original size of the user's profile picture."
                        },
                        "is_custom_image": {
                          "type": "boolean",
                          "description": "Indicates if the user has a custom profile picture."
                        },
                        "email": {
                          "type": "string",
                          "description": "A valid email address. Requires users:read.email scope."
                        },
                        "pronouns": {
                          "type": "string",
                          "description": "The pronouns the user prefers to be addressed by."
                        },
                        "first_name": {
                          "type": "string",
                          "description": "The user's first name."
                        },
                        "last_name": {
                          "type": "string",
                          "description": "The user's last name."
                        },
                        "image_24": {
                          "type": "string",
                          "description": "URL to a 24x24 pixel version of the user's profile picture."
                        },
                        "image_32": {
                          "type": "string",
                          "description": "URL to a 32x32 pixel version of the user's profile picture."
                        },
                        "image_48": {
                          "type": "string",
                          "description": "URL to a 48x48 pixel version of the user's profile picture."
                        },
                        "image_72": {
                          "type": "string",
                          "description": "URL to a 72x72 pixel version of the user's profile picture."
                        },
                        "image_192": {
                          "type": "string",
                          "description": "URL to a 192x192 pixel version of the user's profile picture."
                        },
                        "image_512": {
                          "type": "string",
                          "description": "URL to a 512x512 pixel version of the user's profile picture."
                        },
                        "image_1024": {
                          "type": "string",
                          "description": "URL to a 1024x1024 pixel version of the user's profile picture."
                        },
                        "status_text_canonical": {
                          "type": "string"
                        },
                        "team": {
                          "type": "string",
                          "description": "The ID of the team the user is on."
                        }
                      }
                    },
                    "is_admin": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an Admin of the current workspace."
                    },
                    "is_owner": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an Owner of the current workspace."
                    },
                    "is_primary_owner": {
                      "type": "boolean",
                      "description": "Indicates whether the user is the Primary Owner of the current workspace."
                    },
                    "is_restricted": {
                      "type": "boolean",
                      "description": "Indicates whether or not the user is a guest user."
                    },
                    "is_ultra_restricted": {
                      "type": "boolean",
                      "description": "Indicates whether or not the user is a single-channel guest."
                    },
                    "is_bot": {
                      "type": "boolean",
                      "description": "Indicates whether the user is a bot user."
                    },
                    "is_app_user": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an authorized user of the calling app."
                    },
                    "updated": {
                      "type": "string",
                      "description": "A Unix timestamp indicating when the user object was last updated."
                    },
                    "is_email_confirmed": {
                      "type": "boolean",
                      "description": "Indicates if the user's email address has been confirmed."
                    },
                    "who_can_share_contact_card": {
                      "type": "string",
                      "description": "Who can share the user's contact card."
                    },
                    "enterprise_user": {
                      "type": "object",
                      "description": "An object containing info related to an Enterprise Grid user."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The requested user was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the user was not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/sendFile": {
      "post": {
        "operationId": "sendFile",
        "summary": "Upload a file to a Slack channel.",
        "description": "The sendFile function allows users to upload a file to a specified Slack channel. It takes the channel ID, file content, filename, and an optional title as parameters. The function returns a detailed file object containing information about the uploaded file.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the sendFile sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the channel to upload the file to. Can be a comma-separated list."
                          },
                          {
                            "type": "string",
                            "format": "binary",
                            "description": "A buffer containing the file content."
                          },
                          {
                            "type": "string",
                            "description": "The name of the file."
                          },
                          {
                            "type": "string",
                            "description": "A title for the file.",
                            "nullable": true
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "created": {
                          "type": "integer"
                        },
                        "timestamp": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "title": {
                          "type": "string"
                        },
                        "mimetype": {
                          "type": "string"
                        },
                        "filetype": {
                          "type": "string"
                        },
                        "pretty_type": {
                          "type": "string"
                        },
                        "user": {
                          "type": "string"
                        },
                        "editable": {
                          "type": "boolean"
                        },
                        "size": {
                          "type": "integer"
                        },
                        "mode": {
                          "type": "string",
                          "enum": [
                            "hosted",
                            "external",
                            "snippet",
                            "post"
                          ]
                        },
                        "is_external": {
                          "type": "boolean"
                        },
                        "external_type": {
                          "type": "string"
                        },
                        "is_public": {
                          "type": "boolean"
                        },
                        "public_url_shared": {
                          "type": "boolean"
                        },
                        "url_private": {
                          "type": "string"
                        },
                        "permalink": {
                          "type": "string"
                        },
                        "channels": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "ims": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "comments_count": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id",
                        "created",
                        "timestamp",
                        "title",
                        "mimetype",
                        "filetype",
                        "pretty_type",
                        "user",
                        "editable",
                        "size",
                        "mode",
                        "is_external",
                        "is_public",
                        "public_url_shared",
                        "url_private",
                        "permalink",
                        "channels",
                        "groups",
                        "ims",
                        "comments_count"
                      ]
                    }
                  },
                  "required": [
                    "file"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not allowed to upload to the specified channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large - File size exceeds limit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/WebClient/setReminder": {
      "post": {
        "operationId": "setReminder",
        "summary": "Sets a reminder for a Slack user.",
        "description": "The setReminder function allows setting a reminder for a specified Slack user. It takes the user ID, reminder text, and time as inputs, and returns the details of the created reminder. This function interacts with the Slack API to schedule and manage user reminders.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the setReminder sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "The ID of the user to set the reminder for."
                          },
                          {
                            "type": "string",
                            "description": "The text of the reminder."
                          },
                          {
                            "type": "string",
                            "description": "A string describing when the reminder should fire (e.g., \"in 5 minutes\", \"at 10:30am\", or a Unix timestamp)."
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "WebClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "reminder": {
                      "type": "object",
                      "description": "An object containing the details of the created reminder.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the reminder."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the user who created the reminder."
                        },
                        "user": {
                          "type": "string",
                          "description": "The ID of the user the reminder is for."
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the reminder."
                        },
                        "recurring": {
                          "type": "boolean",
                          "description": "Whether the reminder is recurring."
                        },
                        "time": {
                          "type": "integer",
                          "description": "The timestamp of when the reminder will fire."
                        },
                        "complete_ts": {
                          "type": "integer",
                          "description": "The timestamp of when the reminder was completed."
                        }
                      },
                      "required": [
                        "id",
                        "creator",
                        "user",
                        "text",
                        "recurring",
                        "time"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "reminder"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the reason for the bad request."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The application has exceeded its rate limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "rate_limited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/users-info": {
      "post": {
        "operationId": "users.info",
        "summary": "Retrieves detailed information about a specific Slack user.",
        "description": "The users.info method fetches comprehensive details about a user in a Slack workspace. It returns a user object containing various attributes such as user ID, name, team information, profile details, and user permissions. This method is useful for obtaining up-to-date information about a user's status, roles, and profile data.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.info sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "user": {
                                "type": "string",
                                "description": "User ID to receive information about."
                              },
                              "include_locale": {
                                "type": "boolean",
                                "description": "Set to true to receive the locale for this user. Defaults to false."
                              }
                            },
                            "required": [
                              "user"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "team_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "deleted": {
                          "type": "boolean"
                        },
                        "color": {
                          "type": "string"
                        },
                        "real_name": {
                          "type": "string"
                        },
                        "tz": {
                          "type": "string"
                        },
                        "tz_label": {
                          "type": "string"
                        },
                        "tz_offset": {
                          "type": "integer"
                        },
                        "profile": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "skype": {
                              "type": "string"
                            },
                            "real_name": {
                              "type": "string"
                            },
                            "real_name_normalized": {
                              "type": "string"
                            },
                            "display_name": {
                              "type": "string"
                            },
                            "display_name_normalized": {
                              "type": "string"
                            },
                            "status_text": {
                              "type": "string"
                            },
                            "status_emoji": {
                              "type": "string"
                            },
                            "avatar_hash": {
                              "type": "string"
                            },
                            "image_original": {
                              "type": "string"
                            },
                            "image_24": {
                              "type": "string"
                            },
                            "image_32": {
                              "type": "string"
                            },
                            "image_48": {
                              "type": "string"
                            },
                            "image_72": {
                              "type": "string"
                            },
                            "image_192": {
                              "type": "string"
                            },
                            "image_512": {
                              "type": "string"
                            },
                            "team": {
                              "type": "string"
                            }
                          }
                        },
                        "is_admin": {
                          "type": "boolean"
                        },
                        "is_owner": {
                          "type": "boolean"
                        },
                        "is_primary_owner": {
                          "type": "boolean"
                        },
                        "is_restricted": {
                          "type": "boolean"
                        },
                        "is_ultra_restricted": {
                          "type": "boolean"
                        },
                        "is_bot": {
                          "type": "boolean"
                        },
                        "updated": {
                          "type": "integer"
                        },
                        "is_app_user": {
                          "type": "boolean"
                        },
                        "has_2fa": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "user"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "user_not_found",
                        "user_not_visible",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission",
                        "missing_scope"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/users-list": {
      "post": {
        "operationId": "users.list",
        "summary": "Retrieves a list of all users in a Slack team.",
        "description": "The users.list method returns a comprehensive list of all users in a Slack team, including their profile information and various attributes. It supports pagination and allows filtering by team ID when using an org token. This method is useful for obtaining detailed information about team members and their roles within the Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.list sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "string",
                            "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request.",
                            "name": "cursor"
                          },
                          {
                            "type": "boolean",
                            "description": "Set this to true to receive the locale for users. Defaults to false.",
                            "name": "include_locale"
                          },
                          {
                            "type": "integer",
                            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
                            "name": "limit"
                          },
                          {
                            "type": "string",
                            "description": "Encoded team id to list users in, required if org token is used.",
                            "name": "team_id"
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful."
                    },
                    "members": {
                      "type": "array",
                      "description": "An array of user objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The user's ID."
                          },
                          "team_id": {
                            "type": "string",
                            "description": "The ID of the team the user belongs to."
                          },
                          "name": {
                            "type": "string",
                            "description": "The user's username."
                          },
                          "deleted": {
                            "type": "boolean",
                            "description": "true if the user has been deleted."
                          },
                          "color": {
                            "type": "string",
                            "description": "A hexadecimal color code that is used to color the user's name in Slack clients."
                          },
                          "real_name": {
                            "type": "string",
                            "description": "The user's real name."
                          },
                          "tz": {
                            "type": "string",
                            "description": "The user's timezone (e.g., America/Los_Angeles)."
                          },
                          "tz_label": {
                            "type": "string",
                            "description": "A human-readable string for the user's timezone."
                          },
                          "tz_offset": {
                            "type": "integer",
                            "description": "The user's timezone offset in seconds."
                          },
                          "profile": {
                            "type": "object",
                            "description": "A profile object containing more details about the user.",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The user's title."
                              },
                              "phone": {
                                "type": "string",
                                "description": "The user's phone number."
                              },
                              "skype": {
                                "type": "string",
                                "description": "The user's Skype username."
                              },
                              "real_name": {
                                "type": "string",
                                "description": "The user's real name."
                              },
                              "real_name_normalized": {
                                "type": "string",
                                "description": "The user's real name, normalized."
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The user's display name."
                              },
                              "display_name_normalized": {
                                "type": "string",
                                "description": "The user's display name, normalized."
                              },
                              "status_text": {
                                "type": "string",
                                "description": "The user's status text."
                              },
                              "status_emoji": {
                                "type": "string",
                                "description": "The user's status emoji."
                              },
                              "avatar_hash": {
                                "type": "string",
                                "description": "A hash of the user's avatar image."
                              },
                              "image_original": {
                                "type": "string",
                                "description": "The URL of the user's original-sized profile image."
                              },
                              "image_24": {
                                "type": "string",
                                "description": "The URL of the user's 24x24 profile image."
                              },
                              "image_32": {
                                "type": "string",
                                "description": "The URL of the user's 32x32 profile image."
                              },
                              "image_48": {
                                "type": "string",
                                "description": "The URL of the user's 48x48 profile image."
                              },
                              "image_72": {
                                "type": "string",
                                "description": "The URL of the user's 72x72 profile image."
                              },
                              "image_192": {
                                "type": "string",
                                "description": "The URL of the user's 192x192 profile image."
                              },
                              "image_512": {
                                "type": "string",
                                "description": "The URL of the user's 512x512 profile image."
                              },
                              "team": {
                                "type": "string",
                                "description": "The ID of the team the user belongs to."
                              }
                            }
                          },
                          "is_admin": {
                            "type": "boolean",
                            "description": "true if the user is an admin."
                          },
                          "is_owner": {
                            "type": "boolean",
                            "description": "true if the user is an owner."
                          },
                          "is_primary_owner": {
                            "type": "boolean",
                            "description": "true if the user is the primary owner."
                          },
                          "is_restricted": {
                            "type": "boolean",
                            "description": "true if the user is a restricted user (single-channel guest)."
                          },
                          "is_ultra_restricted": {
                            "type": "boolean",
                            "description": "true if the user is an ultra-restricted user (multi-channel guest)."
                          },
                          "is_bot": {
                            "type": "boolean",
                            "description": "true if the user is a bot."
                          },
                          "updated": {
                            "type": "integer",
                            "description": "A timestamp of when the user's profile was last updated."
                          },
                          "is_app_user": {
                            "type": "boolean",
                            "description": "true if the user is an app user."
                          },
                          "has_2fa": {
                            "type": "boolean",
                            "description": "true if the user has two-factor authentication enabled."
                          }
                        }
                      }
                    },
                    "cache_ts": {
                      "type": "integer",
                      "description": "A timestamp of when the user list was cached."
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information.",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "description": "Cursor to use in subsequent requests for pagination."
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "members"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_cursor",
                        "limit_required",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/users-lookupByEmail": {
      "post": {
        "operationId": "users.lookupByEmail",
        "summary": "Finds a user by their email address in a Slack workspace.",
        "description": "The users.lookupByEmail method allows you to find a user in a Slack workspace using their email address. This is particularly useful for integrations where you have a user's email but not their Slack ID. The method returns detailed information about the user if found.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.lookupByEmail sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "An email address belonging to a user in the workspace."
                              }
                            },
                            "required": [
                              "email"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The user's ID"
                        },
                        "team_id": {
                          "type": "string",
                          "description": "The ID of the team the user belongs to"
                        },
                        "name": {
                          "type": "string",
                          "description": "The user's username"
                        },
                        "deleted": {
                          "type": "boolean",
                          "description": "True if the user has been deleted"
                        },
                        "color": {
                          "type": "string",
                          "description": "A hexadecimal color code for the user's name in Slack clients"
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's real name"
                        },
                        "tz": {
                          "type": "string",
                          "description": "The user's timezone"
                        },
                        "tz_label": {
                          "type": "string",
                          "description": "A human-readable string for the user's timezone"
                        },
                        "tz_offset": {
                          "type": "integer",
                          "description": "The user's timezone offset in seconds"
                        },
                        "profile": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The user's title"
                            },
                            "phone": {
                              "type": "string",
                              "description": "The user's phone number"
                            },
                            "skype": {
                              "type": "string",
                              "description": "The user's Skype username"
                            },
                            "real_name": {
                              "type": "string",
                              "description": "The user's real name"
                            },
                            "real_name_normalized": {
                              "type": "string",
                              "description": "The user's real name, normalized"
                            },
                            "display_name": {
                              "type": "string",
                              "description": "The user's display name"
                            },
                            "display_name_normalized": {
                              "type": "string",
                              "description": "The user's display name, normalized"
                            },
                            "status_text": {
                              "type": "string",
                              "description": "The user's status text"
                            },
                            "status_emoji": {
                              "type": "string",
                              "description": "The user's status emoji"
                            },
                            "avatar_hash": {
                              "type": "string",
                              "description": "A hash of the user's avatar image"
                            },
                            "image_original": {
                              "type": "string",
                              "description": "The URL of the user's original-sized profile image"
                            },
                            "image_24": {
                              "type": "string",
                              "description": "The URL of the user's 24x24 profile image"
                            },
                            "image_32": {
                              "type": "string",
                              "description": "The URL of the user's 32x32 profile image"
                            },
                            "image_48": {
                              "type": "string",
                              "description": "The URL of the user's 48x48 profile image"
                            },
                            "image_72": {
                              "type": "string",
                              "description": "The URL of the user's 72x72 profile image"
                            },
                            "image_192": {
                              "type": "string",
                              "description": "The URL of the user's 192x192 profile image"
                            },
                            "image_512": {
                              "type": "string",
                              "description": "The URL of the user's 512x512 profile image"
                            },
                            "team": {
                              "type": "string",
                              "description": "The ID of the team the user belongs to"
                            }
                          }
                        },
                        "is_admin": {
                          "type": "boolean",
                          "description": "True if the user is an admin"
                        },
                        "is_owner": {
                          "type": "boolean",
                          "description": "True if the user is an owner"
                        },
                        "is_primary_owner": {
                          "type": "boolean",
                          "description": "True if the user is the primary owner"
                        },
                        "is_restricted": {
                          "type": "boolean",
                          "description": "True if the user is a restricted user (single-channel guest)"
                        },
                        "is_ultra_restricted": {
                          "type": "boolean",
                          "description": "True if the user is an ultra-restricted user (multi-channel guest)"
                        },
                        "is_bot": {
                          "type": "boolean",
                          "description": "True if the user is a bot"
                        },
                        "updated": {
                          "type": "integer",
                          "description": "A timestamp of when the user's profile was last updated"
                        },
                        "is_app_user": {
                          "type": "boolean",
                          "description": "True if the user is an app user"
                        },
                        "has_2fa": {
                          "type": "boolean",
                          "description": "True if the user has two-factor authentication enabled"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "users_not_found",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MicrofoxSlackClient/views-open": {
      "post": {
        "operationId": "views.open",
        "summary": "Opens a modal view for a user in Slack.",
        "description": "The views.open method opens a modal for a user in Slack. It requires a trigger_id obtained from a user interaction and a view payload defining the modal's content and behavior. This method allows for creating interactive surfaces for various purposes such as forms, alerts, and more.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the views.open sls call",
                    "properties": {
                      "arguments": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "trigger_id": {
                                "type": "string",
                                "description": "A short-lived token received after a user interaction, used to open the modal."
                              },
                              "view": {
                                "type": "object",
                                "description": "A view payload defining the modal's content and behavior.",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "modal"
                                    ],
                                    "description": "The type of view. Must be 'modal' for modals."
                                  },
                                  "title": {
                                    "type": "object",
                                    "description": "The title that appears in the top-left of the modal.",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "plain_text"
                                        ],
                                        "description": "Must be 'plain_text' for the title."
                                      },
                                      "text": {
                                        "type": "string",
                                        "maxLength": 24,
                                        "description": "The text content of the title."
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text"
                                    ]
                                  },
                                  "submit": {
                                    "type": "object",
                                    "description": "Defines the text displayed in the submit button.",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "plain_text"
                                        ],
                                        "description": "Must be 'plain_text' for the submit button."
                                      },
                                      "text": {
                                        "type": "string",
                                        "maxLength": 24,
                                        "description": "The text content of the submit button."
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text"
                                    ]
                                  },
                                  "blocks": {
                                    "type": "array",
                                    "description": "An array of blocks that defines the content of the view.",
                                    "maxItems": 100,
                                    "items": {
                                      "type": "object",
                                      "description": "A block object defining part of the modal's content."
                                    }
                                  },
                                  "private_metadata": {
                                    "type": "string",
                                    "maxLength": 3000,
                                    "description": "A string that will be sent to your app in view_submission and block_actions events."
                                  },
                                  "callback_id": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "description": "An identifier to recognize interactions and submissions of this particular view."
                                  },
                                  "external_id": {
                                    "type": "string",
                                    "description": "A custom identifier that must be unique for all views on a per-team basis."
                                  },
                                  "clear_on_close": {
                                    "type": "boolean",
                                    "description": "When set to true, clicking on the close button will clear all views in a modal and close it.",
                                    "default": false
                                  },
                                  "notify_on_close": {
                                    "type": "boolean",
                                    "description": "Indicates whether Slack will send your request URL a view_closed event when a user clicks the close button.",
                                    "default": false
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "blocks"
                                ]
                              }
                            },
                            "required": [
                              "trigger_id",
                              "view"
                            ]
                          }
                        ]
                      },
                      "auth": {
                        "type": "object",
                        "description": "Authentication object",
                        "properties": {
                          "strategy": {
                            "type": "string",
                            "description": "Authentication strategy",
                            "enum": [
                              "apikey"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "description": "Variables for the authentication strategy",
                            "items": [
                              {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "SLACK_BOT_TOKEN"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "value of SLACK_BOT_TOKEN"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "constructorName": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "default": "MicrofoxSlackClient"
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates whether the call was successful."
                    },
                    "view": {
                      "type": "object",
                      "description": "The view object representing the opened modal.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for the view."
                        },
                        "team_id": {
                          "type": "string",
                          "description": "The ID of the team that the view belongs to."
                        },
                        "type": {
                          "type": "string",
                          "description": "The type of view. Set to 'modal' for modals."
                        },
                        "title": {
                          "type": "object",
                          "description": "The title that appears in the top-left of the modal."
                        },
                        "submit": {
                          "type": "object",
                          "description": "The submit button configuration."
                        },
                        "blocks": {
                          "type": "array",
                          "description": "An array of blocks that defines the content of the view."
                        },
                        "private_metadata": {
                          "type": "string",
                          "description": "A string sent to your app in view_submission and block_actions events."
                        },
                        "callback_id": {
                          "type": "string",
                          "description": "An identifier to recognize interactions and submissions of this view."
                        },
                        "external_id": {
                          "type": "string",
                          "description": "A custom identifier unique for all views on a per-team basis."
                        },
                        "state": {
                          "type": "object",
                          "description": "An object that contains the state of any interactive components in the view."
                        },
                        "hash": {
                          "type": "string",
                          "description": "A unique value used to ensure the correct view is being updated."
                        },
                        "clear_on_close": {
                          "type": "boolean",
                          "description": "Indicates whether clicking the close button clears all views in the modal."
                        },
                        "notify_on_close": {
                          "type": "boolean",
                          "description": "Indicates whether Slack sends a view_closed event when the modal is closed."
                        },
                        "root_view_id": {
                          "type": "string",
                          "description": "The ID of the root view."
                        },
                        "app_id": {
                          "type": "string",
                          "description": "The ID of the app that created the view."
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot user that created the view."
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "view"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful."
                    },
                    "error": {
                      "type": "string",
                      "description": "A string describing the error.",
                      "enum": [
                        "duplicate_external_id",
                        "exchanged_trigger_id",
                        "expired_trigger_id",
                        "invalid_trigger_id",
                        "view_too_large",
                        "not_authed",
                        "invalid_auth",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ]
                    },
                    "response_metadata": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "An array of error messages."
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful."
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ],
                      "description": "A string describing the authentication error."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful."
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ],
                      "description": "Indicates that the request has been rate limited."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful."
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "A string describing the server error."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates that the request was unsuccessful."
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Indicates that the service is temporarily unavailable."
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}