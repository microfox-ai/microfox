{
  "openapi": "3.0.1",
  "info": {
    "title": "Microfox Slack API",
    "version": "1.1.1",
    "mcp_version": "1.0.1",
    "description": "A proxy for the official @slack/web-api, providing a curated set of the most useful functions.",
    "contact": {
      "name": "Microfox Dev Support",
      "email": "support@microfox.com"
    }
  },
  "servers": [
    {
      "url": "https://api.microfox.com/c/slack",
      "description": "Unified wrapper endpoint"
    }
  ],
  "components": {
    "x-auth-packages": [
      {
        "packageName": "@microfox/slack"
      }
    ]
  },
  "paths": {
    "/chat-postMessage": {
      "post": {
        "operationId": "chat.postMessage",
        "summary": "Send a message to a Slack channel.",
        "description": "The chat.postMessage function allows you to send a message to a specified Slack channel, private group, or IM channel. It supports various customization options including text formatting, attachments, blocks, and metadata. This function is essential for programmatically interacting with Slack channels and users.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the chat.postMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for sending a message to a Slack channel",
                        "properties": {
                          "channel": {
                            "type": "string",
                            "description": "Channel, private group, or IM channel ID to send message to. Can be an encoded ID, or a channel name."
                          },
                          "text": {
                            "type": "string",
                            "description": "The formatted text of the message to be published. If blocks are included, this will be used as fallback text for notifications."
                          },
                          "attachments": {
                            "type": "string",
                            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                          },
                          "blocks": {
                            "type": "string",
                            "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                          },
                          "as_user": {
                            "type": "boolean",
                            "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false."
                          },
                          "icon_emoji": {
                            "type": "string",
                            "description": "Emoji to use as the icon for this message. Overrides icon_url."
                          },
                          "icon_url": {
                            "type": "string",
                            "description": "URL to an image to use as the icon for this message."
                          },
                          "link_names": {
                            "type": "boolean",
                            "description": "Find and link user groups."
                          },
                          "mrkdwn": {
                            "type": "boolean",
                            "description": "Disable Slack markup parsing by setting to false. Enabled by default."
                          },
                          "metadata": {
                            "type": "string",
                            "description": "JSON object with event_type and event_payload fields, presented as a URL-encoded string."
                          },
                          "parse": {
                            "type": "string",
                            "description": "Change how messages are treated. Defaults to none."
                          },
                          "reply_broadcast": {
                            "type": "boolean",
                            "description": "Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false."
                          },
                          "thread_ts": {
                            "type": "string",
                            "description": "The ts value of another message to reply to."
                          },
                          "unfurl_links": {
                            "type": "boolean",
                            "description": "Pass true to enable unfurling of primarily text-based content."
                          },
                          "unfurl_media": {
                            "type": "boolean",
                            "description": "Pass false to disable unfurling of media content."
                          },
                          "username": {
                            "type": "string",
                            "description": "Set your bot's user name."
                          }
                        },
                        "required": [
                          "channel"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message"
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error code indicating the specific issue"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "token_expired",
                        "token_revoked"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "access_denied",
                        "no_permission",
                        "missing_scope"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "rate_limited"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/chat-update": {
      "post": {
        "operationId": "chat.update",
        "summary": "Update an existing message in a Slack channel.",
        "description": "The chat.update method allows you to modify an existing message in a Slack channel. This is particularly useful for updating the status of long-running tasks or providing progressive information to users. The method supports updating text, attachments, and blocks, offering flexibility in message formatting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the chat.update sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for updating a Slack message",
                        "properties": {
                          "channel": {
                            "type": "string",
                            "description": "The ID of the conversation to update the message in"
                          },
                          "ts": {
                            "type": "string",
                            "description": "The timestamp of the message to be updated"
                          },
                          "text": {
                            "type": "string",
                            "description": "The new text for the message. Required if blocks and attachments are not provided"
                          },
                          "attachments": {
                            "type": "string",
                            "description": "A JSON-based array of structured attachments"
                          },
                          "blocks": {
                            "type": "array",
                            "description": "An array of structured blocks",
                            "items": {
                              "type": "object"
                            }
                          },
                          "as_user": {
                            "type": "boolean",
                            "description": "Pass true to update the message as the authed user. Bot users are considered authed users"
                          },
                          "link_names": {
                            "type": "boolean",
                            "description": "Find and link channel names and usernames"
                          },
                          "parse": {
                            "type": "string",
                            "description": "Change how messages are treated. Defaults to 'client'. Can be 'none' or 'full'",
                            "enum": [
                              "none",
                              "full",
                              "client"
                            ]
                          },
                          "metadata": {
                            "type": "object",
                            "description": "A JSON object with event_type and event_payload fields",
                            "properties": {
                              "event_type": {
                                "type": "string"
                              },
                              "event_payload": {
                                "type": "object"
                              }
                            },
                            "required": [
                              "event_type",
                              "event_payload"
                            ]
                          }
                        },
                        "required": [
                          "channel",
                          "ts"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "text": {
                      "type": "string",
                      "description": "The new text of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message"
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "cant_update_message",
                        "channel_not_found",
                        "message_not_found",
                        "edit_window_closed",
                        "msg_too_long",
                        "no_text",
                        "as_user_not_supported",
                        "invalid_blocks",
                        "not_in_channel",
                        "is_archived",
                        "missing_scope",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "ratelimited"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "service_unavailable"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/conversations-history": {
      "post": {
        "operationId": "conversations.history",
        "summary": "Fetches a conversation's history of messages and events.",
        "description": "This function retrieves the message and event history for a specified conversation (channel) in Slack. It allows for pagination and filtering of results based on timestamps. The function returns an array of message objects along with metadata about the conversation and response.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.history sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for fetching conversation history",
                        "properties": {
                          "channel": {
                            "type": "string",
                            "description": "Conversation ID to fetch history for."
                          },
                          "cursor": {
                            "type": "string",
                            "description": "Pagination cursor for fetching next set of results."
                          },
                          "include_all_metadata": {
                            "type": "boolean",
                            "description": "Whether to return all metadata associated with messages.",
                            "default": false
                          },
                          "inclusive": {
                            "type": "boolean",
                            "description": "Include messages with 'oldest' or 'latest' timestamps in results."
                          },
                          "latest": {
                            "type": "string",
                            "description": "Unix timestamp. Only messages before this time will be included."
                          },
                          "limit": {
                            "type": "integer",
                            "description": "The maximum number of items to return."
                          },
                          "oldest": {
                            "type": "string",
                            "description": "Unix timestamp. Only messages after this time will be included."
                          }
                        },
                        "required": [
                          "channel"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with conversation history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful."
                    },
                    "messages": {
                      "type": "array",
                      "description": "Array of message objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of message."
                          },
                          "user": {
                            "type": "string",
                            "description": "The ID of the user who sent the message."
                          },
                          "text": {
                            "type": "string",
                            "description": "The text of the message."
                          },
                          "ts": {
                            "type": "string",
                            "description": "The timestamp of the message."
                          }
                        }
                      }
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Indicates if there are more messages to retrieve."
                    },
                    "pin_count": {
                      "type": "integer",
                      "description": "The number of pinned messages in the channel."
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found",
                        "invalid_cursor",
                        "invalid_ts_latest",
                        "invalid_ts_oldest",
                        "not_in_channel",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conversations-join": {
      "post": {
        "operationId": "conversations.join",
        "summary": "Join an existing public channel in Slack.",
        "description": "The conversations.join method allows a user or bot to join an existing public channel in a Slack workspace. This is essential for bots that need to be active in specific channels. The method requires the channel ID and returns detailed information about the joined channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.join sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for joining a Slack channel",
                        "properties": {
                          "channel": {
                            "type": "string",
                            "description": "The ID of the conversation (channel) to join."
                          }
                        },
                        "required": [
                          "channel"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully joined the channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    },
                    "channel": {
                      "type": "object",
                      "description": "Details about the joined channel",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel"
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether the conversation is a channel"
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Indicates if the channel is a private channel created before March 2021"
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Indicates if the conversation is a direct message"
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Indicates if the conversation is an unnamed private conversation between multiple users"
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Indicates if the conversation is privileged between two or more members"
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created"
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation"
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates if the conversation is archived"
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Indicates if the channel is the workspace's 'general' discussion channel"
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel"
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name with any special characters replaced"
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates if the conversation is part of a Shared Channel"
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates if the conversation is part of a Shared Channel with a remote organization"
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates if this shared channel is shared between Enterprise Grid workspaces within the same organization"
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined",
                          "items": {
                            "type": "string"
                          }
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates if the conversation is ready to become an external shared channel but needs approval"
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates if the user, bot user or Slack app is a member of the conversation"
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic"
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose"
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel",
                          "items": {
                            "type": "string"
                          }
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "channel_not_found",
                        "is_archived",
                        "method_not_supported_for_channel_type",
                        "missing_scope",
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission",
                        "user_is_restricted"
                      ],
                      "description": "Error code explaining the failure reason"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code explaining the failure reason"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Error code indicating the service is temporarily unavailable"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/conversations-list": {
      "post": {
        "operationId": "conversations.list",
        "summary": "Lists conversations (channels, private channels, DMs, and MPDMs) in a Slack workspace.",
        "description": "The conversations.list method retrieves a list of conversations in a Slack workspace. It supports pagination, filtering by conversation types, and exclusion of archived channels. The method returns detailed information about each conversation, including its properties and member count.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the conversations.list sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for listing conversations",
                        "properties": {
                          "cursor": {
                            "type": "string",
                            "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request."
                          },
                          "exclude_archived": {
                            "type": "boolean",
                            "description": "Set to true to exclude archived channels from the list. Default is false."
                          },
                          "limit": {
                            "type": "integer",
                            "description": "The maximum number of items to return. Must be an integer under 1000. Default is 100.",
                            "minimum": 1,
                            "maximum": 999
                          },
                          "team_id": {
                            "type": "string",
                            "description": "Required for org-wide apps."
                          },
                          "types": {
                            "type": "string",
                            "description": "A comma-separated list of conversation types to include. Types can be public_channel, private_channel, mpim, and im. Default is public_channel."
                          }
                        }
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channels": {
                      "type": "array",
                      "description": "An array of conversation objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the conversation"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the channel-like thing"
                          },
                          "is_channel": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is a channel"
                          },
                          "is_group": {
                            "type": "boolean",
                            "description": "Means the channel is a private channel created before March 2021"
                          },
                          "is_im": {
                            "type": "boolean",
                            "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot"
                          },
                          "is_mpim": {
                            "type": "boolean",
                            "description": "Represents an unnamed private conversation between multiple users"
                          },
                          "is_private": {
                            "type": "boolean",
                            "description": "Means the conversation is privileged between two or more members"
                          },
                          "created": {
                            "type": "integer",
                            "description": "Timestamp of when the conversation was created"
                          },
                          "creator": {
                            "type": "string",
                            "description": "The ID of the member that created this conversation"
                          },
                          "is_archived": {
                            "type": "boolean",
                            "description": "Indicates a conversation is archived"
                          },
                          "is_general": {
                            "type": "boolean",
                            "description": "Means the channel is the workspace's \"general\" discussion channel"
                          },
                          "unlinked": {
                            "type": "integer",
                            "description": "The number of members that have been removed from the channel"
                          },
                          "name_normalized": {
                            "type": "string",
                            "description": "The channel name, but with any special characters replaced"
                          },
                          "is_shared": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is part of a Shared Channel"
                          },
                          "is_ext_shared": {
                            "type": "boolean",
                            "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization"
                          },
                          "is_org_shared": {
                            "type": "boolean",
                            "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization"
                          },
                          "pending_shared": {
                            "type": "array",
                            "description": "A list of team IDs that have been invited to the channel but have not yet joined",
                            "items": {
                              "type": "string"
                            }
                          },
                          "is_pending_ext_shared": {
                            "type": "boolean",
                            "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first"
                          },
                          "is_member": {
                            "type": "boolean",
                            "description": "Indicates whether the user, bot user or Slack app is a member of the conversation"
                          },
                          "topic": {
                            "type": "object",
                            "description": "Provides information about the channel topic"
                          },
                          "purpose": {
                            "type": "object",
                            "description": "Provides information about the channel purpose"
                          },
                          "previous_names": {
                            "type": "array",
                            "description": "A list of previous names for the channel",
                            "items": {
                              "type": "string"
                            }
                          },
                          "num_members": {
                            "type": "integer",
                            "description": "The number of members in the conversation"
                          }
                        }
                      }
                    },
                    "response_metadata": {
                      "type": "object",
                      "description": "An object containing pagination information"
                    }
                  },
                  "required": [
                    "ok",
                    "channels"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_cursor",
                        "invalid_limit",
                        "invalid_types",
                        "method_not_supported_for_channel_type",
                        "invalid_arguments",
                        "invalid_arg_name"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_auth",
                        "not_authed",
                        "token_revoked"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "missing_scope",
                        "team_access_not_granted",
                        "access_denied",
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reactions-add": {
      "post": {
        "operationId": "reactions.add",
        "summary": "Add a reaction (emoji) to a message in a Slack channel.",
        "description": "This function adds a reaction emoji to a specific message in a Slack channel. It requires the channel ID, the timestamp of the message, and the name of the reaction (emoji) to be added. The function interacts with Slack's API to perform this action.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reactions.add sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for adding a reaction to a message",
                        "properties": {
                          "channel": {
                            "type": "string",
                            "description": "Channel ID where the message to add reaction to was posted"
                          },
                          "name": {
                            "type": "string",
                            "description": "Reaction (emoji) name to be added"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Timestamp of the message to add reaction to"
                          }
                        },
                        "required": [
                          "channel",
                          "name",
                          "timestamp"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error code",
                      "enum": [
                        "already_reacted",
                        "bad_timestamp",
                        "channel_not_found",
                        "invalid_name",
                        "is_archived",
                        "message_not_found",
                        "no_item_specified",
                        "not_reactable",
                        "thread_locked",
                        "too_many_emoji",
                        "too_many_reactions",
                        "missing_scope",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable",
                        "team_added_to_org"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users-info": {
      "post": {
        "operationId": "users.info",
        "summary": "Retrieves information about a specific user in Slack.",
        "description": "The users.info method fetches detailed information about a user in a Slack workspace. It returns a comprehensive user object containing various attributes such as user ID, name, team information, profile details, and user permissions. This method is useful for obtaining up-to-date user data or verifying user information within a Slack application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.info sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for the users.info method",
                        "properties": {
                          "user": {
                            "type": "string",
                            "description": "User ID to receive information about."
                          },
                          "include_locale": {
                            "type": "boolean",
                            "description": "Set to true to receive the locale for this user.",
                            "default": false
                          }
                        },
                        "required": [
                          "user"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "user": {
                      "type": "object",
                      "description": "User object containing detailed information",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "team_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "deleted": {
                          "type": "boolean"
                        },
                        "color": {
                          "type": "string"
                        },
                        "real_name": {
                          "type": "string"
                        },
                        "tz": {
                          "type": "string"
                        },
                        "tz_label": {
                          "type": "string"
                        },
                        "tz_offset": {
                          "type": "integer"
                        },
                        "profile": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "skype": {
                              "type": "string"
                            },
                            "real_name": {
                              "type": "string"
                            },
                            "real_name_normalized": {
                              "type": "string"
                            },
                            "display_name": {
                              "type": "string"
                            },
                            "display_name_normalized": {
                              "type": "string"
                            },
                            "status_text": {
                              "type": "string"
                            },
                            "status_emoji": {
                              "type": "string"
                            },
                            "avatar_hash": {
                              "type": "string"
                            },
                            "image_original": {
                              "type": "string"
                            },
                            "image_24": {
                              "type": "string"
                            },
                            "image_32": {
                              "type": "string"
                            },
                            "image_48": {
                              "type": "string"
                            },
                            "image_72": {
                              "type": "string"
                            },
                            "image_192": {
                              "type": "string"
                            },
                            "image_512": {
                              "type": "string"
                            },
                            "team": {
                              "type": "string"
                            }
                          }
                        },
                        "is_admin": {
                          "type": "boolean"
                        },
                        "is_owner": {
                          "type": "boolean"
                        },
                        "is_primary_owner": {
                          "type": "boolean"
                        },
                        "is_restricted": {
                          "type": "boolean"
                        },
                        "is_ultra_restricted": {
                          "type": "boolean"
                        },
                        "is_bot": {
                          "type": "boolean"
                        },
                        "updated": {
                          "type": "integer"
                        },
                        "is_app_user": {
                          "type": "boolean"
                        },
                        "has_2fa": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "user"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "user_not_found",
                        "user_not_visible",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "missing_scope",
                        "no_permission"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users-list": {
      "post": {
        "operationId": "users.list",
        "summary": "Retrieve a list of all users in a Slack team.",
        "description": "The users.list method returns a comprehensive list of all users in a Slack team, including their profiles and various attributes. It supports pagination and allows filtering by team ID when using an org token. This method is useful for user management, directory services, or syncing user data with external systems.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.list sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for the users.list method",
                        "properties": {
                          "cursor": {
                            "type": "string",
                            "description": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request."
                          },
                          "include_locale": {
                            "type": "boolean",
                            "description": "Set this to true to receive the locale for users. Defaults to false."
                          },
                          "limit": {
                            "type": "integer",
                            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
                          },
                          "team_id": {
                            "type": "string",
                            "description": "Encoded team id to list users in, required if org token is used."
                          }
                        }
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with a list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "members": {
                      "type": "array",
                      "description": "An array of user objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "team_id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "deleted": {
                            "type": "boolean"
                          },
                          "color": {
                            "type": "string"
                          },
                          "real_name": {
                            "type": "string"
                          },
                          "tz": {
                            "type": "string"
                          },
                          "tz_label": {
                            "type": "string"
                          },
                          "tz_offset": {
                            "type": "integer"
                          },
                          "profile": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string"
                              },
                              "phone": {
                                "type": "string"
                              },
                              "skype": {
                                "type": "string"
                              },
                              "real_name": {
                                "type": "string"
                              },
                              "real_name_normalized": {
                                "type": "string"
                              },
                              "display_name": {
                                "type": "string"
                              },
                              "display_name_normalized": {
                                "type": "string"
                              },
                              "status_text": {
                                "type": "string"
                              },
                              "status_emoji": {
                                "type": "string"
                              },
                              "avatar_hash": {
                                "type": "string"
                              },
                              "image_original": {
                                "type": "string"
                              },
                              "image_24": {
                                "type": "string"
                              },
                              "image_32": {
                                "type": "string"
                              },
                              "image_48": {
                                "type": "string"
                              },
                              "image_72": {
                                "type": "string"
                              },
                              "image_192": {
                                "type": "string"
                              },
                              "image_512": {
                                "type": "string"
                              },
                              "team": {
                                "type": "string"
                              }
                            }
                          },
                          "is_admin": {
                            "type": "boolean"
                          },
                          "is_owner": {
                            "type": "boolean"
                          },
                          "is_primary_owner": {
                            "type": "boolean"
                          },
                          "is_restricted": {
                            "type": "boolean"
                          },
                          "is_ultra_restricted": {
                            "type": "boolean"
                          },
                          "is_bot": {
                            "type": "boolean"
                          },
                          "updated": {
                            "type": "integer"
                          },
                          "is_app_user": {
                            "type": "boolean"
                          },
                          "has_2fa": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "cache_ts": {
                      "type": "integer"
                    },
                    "response_metadata": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_cursor",
                        "limit_required",
                        "missing_scope",
                        "invalid_auth",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ]
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users-lookupByEmail": {
      "post": {
        "operationId": "users.lookupByEmail",
        "summary": "Look up a Slack user by their email address",
        "description": "This function finds a user in a Slack workspace using their email address. It's particularly useful for integrations where you have a user's email but not their Slack ID. The function returns detailed information about the user if found, including their profile data and various account flags.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the users.lookupByEmail sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for looking up a user by email",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "An email address belonging to a user in the workspace"
                          }
                        },
                        "required": [
                          "email"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The user's ID"
                        },
                        "team_id": {
                          "type": "string",
                          "description": "The ID of the team the user belongs to"
                        },
                        "name": {
                          "type": "string",
                          "description": "The user's username"
                        },
                        "deleted": {
                          "type": "boolean",
                          "description": "True if the user has been deleted"
                        },
                        "color": {
                          "type": "string",
                          "description": "A hexadecimal color code for the user's name in Slack clients"
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's real name"
                        },
                        "tz": {
                          "type": "string",
                          "description": "The user's timezone"
                        },
                        "tz_label": {
                          "type": "string",
                          "description": "A human-readable string for the user's timezone"
                        },
                        "tz_offset": {
                          "type": "integer",
                          "description": "The user's timezone offset in seconds"
                        },
                        "profile": {
                          "type": "object",
                          "description": "A profile object containing more details about the user",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The user's title"
                            },
                            "phone": {
                              "type": "string",
                              "description": "The user's phone number"
                            },
                            "skype": {
                              "type": "string",
                              "description": "The user's Skype username"
                            },
                            "real_name": {
                              "type": "string",
                              "description": "The user's real name"
                            },
                            "real_name_normalized": {
                              "type": "string",
                              "description": "The user's real name, normalized"
                            },
                            "display_name": {
                              "type": "string",
                              "description": "The user's display name"
                            },
                            "display_name_normalized": {
                              "type": "string",
                              "description": "The user's display name, normalized"
                            },
                            "status_text": {
                              "type": "string",
                              "description": "The user's status text"
                            },
                            "status_emoji": {
                              "type": "string",
                              "description": "The user's status emoji"
                            },
                            "avatar_hash": {
                              "type": "string",
                              "description": "A hash of the user's avatar image"
                            },
                            "image_original": {
                              "type": "string",
                              "description": "The URL of the user's original-sized profile image"
                            },
                            "image_24": {
                              "type": "string",
                              "description": "The URL of the user's 24x24 profile image"
                            },
                            "image_32": {
                              "type": "string",
                              "description": "The URL of the user's 32x32 profile image"
                            },
                            "image_48": {
                              "type": "string",
                              "description": "The URL of the user's 48x48 profile image"
                            },
                            "image_72": {
                              "type": "string",
                              "description": "The URL of the user's 72x72 profile image"
                            },
                            "image_192": {
                              "type": "string",
                              "description": "The URL of the user's 192x192 profile image"
                            },
                            "image_512": {
                              "type": "string",
                              "description": "The URL of the user's 512x512 profile image"
                            },
                            "team": {
                              "type": "string",
                              "description": "The ID of the team the user belongs to"
                            }
                          }
                        },
                        "is_admin": {
                          "type": "boolean",
                          "description": "True if the user is an admin"
                        },
                        "is_owner": {
                          "type": "boolean",
                          "description": "True if the user is an owner"
                        },
                        "is_primary_owner": {
                          "type": "boolean",
                          "description": "True if the user is the primary owner"
                        },
                        "is_restricted": {
                          "type": "boolean",
                          "description": "True if the user is a restricted user (single-channel guest)"
                        },
                        "is_ultra_restricted": {
                          "type": "boolean",
                          "description": "True if the user is an ultra-restricted user (multi-channel guest)"
                        },
                        "is_bot": {
                          "type": "boolean",
                          "description": "True if the user is a bot"
                        },
                        "updated": {
                          "type": "integer",
                          "description": "A timestamp of when the user's profile was last updated"
                        },
                        "is_app_user": {
                          "type": "boolean",
                          "description": "True if the user is an app user"
                        },
                        "has_2fa": {
                          "type": "boolean",
                          "description": "True if the user has two-factor authentication enabled"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "user"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "users_not_found",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "not_authed",
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Permission error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "missing_scope"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Always false for error responses"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Error code"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/views-open": {
      "post": {
        "operationId": "views.open",
        "summary": "Opens a modal view for a user in Slack.",
        "description": "The views.open method opens a modal for a user in Slack. It requires a trigger_id obtained from a user interaction and a view payload defining the modal's content and behavior. This method allows for creating interactive surfaces for various purposes such as forms, alerts, and more.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the views.open sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for opening a modal view",
                        "properties": {
                          "trigger_id": {
                            "type": "string",
                            "description": "A short-lived token received after a user interaction, used to open the modal"
                          },
                          "view": {
                            "type": "object",
                            "description": "A view payload defining the modal's content and behavior",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "modal"
                                ],
                                "description": "The type of view, must be 'modal' for modals"
                              },
                              "title": {
                                "type": "object",
                                "description": "The title that appears in the top-left of the modal",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "plain_text"
                                    ],
                                    "description": "Must be 'plain_text' for modal titles"
                                  },
                                  "text": {
                                    "type": "string",
                                    "maxLength": 24,
                                    "description": "The text content of the title, max 24 characters"
                                  }
                                },
                                "required": [
                                  "type",
                                  "text"
                                ]
                              },
                              "submit": {
                                "type": "object",
                                "description": "Defines the text displayed in the submit button",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "plain_text"
                                    ],
                                    "description": "Must be 'plain_text' for submit button"
                                  },
                                  "text": {
                                    "type": "string",
                                    "maxLength": 24,
                                    "description": "The text content of the submit button, max 24 characters"
                                  }
                                },
                                "required": [
                                  "type",
                                  "text"
                                ]
                              },
                              "blocks": {
                                "type": "array",
                                "description": "An array of blocks that defines the content of the view",
                                "maxItems": 100,
                                "items": {
                                  "type": "object",
                                  "description": "A block object defining part of the modal's content"
                                }
                              },
                              "private_metadata": {
                                "type": "string",
                                "maxLength": 3000,
                                "description": "A string sent to your app in view_submission and block_actions events"
                              },
                              "callback_id": {
                                "type": "string",
                                "maxLength": 255,
                                "description": "An identifier to recognize interactions and submissions of this view"
                              },
                              "external_id": {
                                "type": "string",
                                "description": "A custom identifier that must be unique for all views on a per-team basis"
                              },
                              "clear_on_close": {
                                "type": "boolean",
                                "description": "When true, clicking the close button clears all views in the modal and closes it",
                                "default": false
                              },
                              "notify_on_close": {
                                "type": "boolean",
                                "description": "When true, Slack sends a view_closed event when a user clicks the close button",
                                "default": false
                              }
                            },
                            "required": [
                              "type",
                              "title",
                              "blocks"
                            ]
                          }
                        },
                        "required": [
                          "trigger_id",
                          "view"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "WebClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "view": {
                      "type": "object",
                      "description": "The view object representing the opened modal",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for the view"
                        },
                        "team_id": {
                          "type": "string",
                          "description": "The ID of the team that the view belongs to"
                        },
                        "type": {
                          "type": "string",
                          "description": "The type of view, set to 'modal' for modals"
                        },
                        "title": {
                          "type": "object",
                          "description": "The title of the modal"
                        },
                        "submit": {
                          "type": "object",
                          "description": "The submit button of the modal"
                        },
                        "blocks": {
                          "type": "array",
                          "description": "An array of blocks that defines the content of the view"
                        },
                        "private_metadata": {
                          "type": "string",
                          "description": "Custom string sent in view_submission and block_actions events"
                        },
                        "callback_id": {
                          "type": "string",
                          "description": "Identifier for interactions and submissions of this view"
                        },
                        "external_id": {
                          "type": "string",
                          "description": "Custom identifier unique for all views on a per-team basis"
                        },
                        "state": {
                          "type": "object",
                          "description": "State of interactive components in the view"
                        },
                        "hash": {
                          "type": "string",
                          "description": "Unique value to ensure correct view updates"
                        },
                        "clear_on_close": {
                          "type": "boolean",
                          "description": "Indicates if clicking close clears all views and closes the modal"
                        },
                        "notify_on_close": {
                          "type": "boolean",
                          "description": "Indicates if Slack sends a view_closed event on close"
                        },
                        "root_view_id": {
                          "type": "string",
                          "description": "The ID of the root view"
                        },
                        "app_id": {
                          "type": "string",
                          "description": "The ID of the app that created the view"
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot user that created the view"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "view"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error code",
                      "enum": [
                        "duplicate_external_id",
                        "exchanged_trigger_id",
                        "expired_trigger_id",
                        "invalid_trigger_id",
                        "view_too_large",
                        "not_authed",
                        "invalid_auth",
                        "invalid_arg_name",
                        "invalid_array_arg",
                        "invalid_charset",
                        "invalid_form_data",
                        "invalid_post_type",
                        "missing_post_type",
                        "request_timeout"
                      ]
                    },
                    "response_metadata": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of error messages"
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_auth",
                        "account_inactive",
                        "token_revoked",
                        "no_permission"
                      ],
                      "description": "Error code for unauthorized access"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "ratelimited",
                        "accesslimited"
                      ],
                      "description": "Error code for rate limiting"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "fatal_error",
                        "internal_error"
                      ],
                      "description": "Error code for server errors"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "service_unavailable"
                      ],
                      "description": "Error code for service unavailability"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/addUserToChannel": {
      "post": {
        "operationId": "addUserToChannel",
        "summary": "Invites a user to a Slack channel.",
        "description": "The addUserToChannel function adds a specified user to a given Slack channel. It takes the channel ID and user ID as inputs and returns a response containing information about the channel and the success status of the operation. This function is useful for programmatically managing channel memberships in a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the addUserToChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for adding a user to a channel",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel to invite the user to."
                          },
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user to invite."
                          }
                        },
                        "required": [
                          "channelId",
                          "userId"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful."
                    },
                    "channel": {
                      "type": "object",
                      "description": "A conversation object with details on the channel.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing."
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel."
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021."
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users."
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members."
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created."
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation."
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived."
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel."
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel."
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced."
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel."
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first."
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation."
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic."
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose."
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation."
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized to add user to channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/createChannel": {
      "post": {
        "operationId": "createChannel",
        "summary": "Create a new public or private channel in Slack.",
        "description": "This function creates a new channel in a Slack workspace. It allows for the creation of either public or private channels, with the option to set the channel's privacy status. The function returns a detailed conversation object for the newly created channel, including various properties such as ID, name, privacy settings, and other relevant metadata.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the createChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for creating a new Slack channel",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the channel to create"
                          },
                          "isPrivate": {
                            "type": "boolean",
                            "description": "Whether the channel should be private",
                            "default": false
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "channel": {
                      "type": "object",
                      "description": "Conversation object for the newly created channel",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing"
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel"
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021"
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot"
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users"
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members"
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created"
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation"
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived"
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's \"general\" discussion channel"
                        },
                        "unlinked": {
                          "type": "integer",
                          "description": "The number of members that have been removed from the channel"
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The channel name, but with any special characters replaced"
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel"
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization"
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization"
                        },
                        "pending_shared": {
                          "type": "array",
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined",
                          "items": {
                            "type": "string"
                          }
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs some kind of approval or sign off first"
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app is a member of the conversation"
                        },
                        "topic": {
                          "type": "object",
                          "description": "Provides information about the channel topic"
                        },
                        "purpose": {
                          "type": "object",
                          "description": "Provides information about the channel purpose"
                        },
                        "previous_names": {
                          "type": "array",
                          "description": "A list of previous names for the channel",
                          "items": {
                            "type": "string"
                          }
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "is_channel",
                        "is_private",
                        "created",
                        "creator"
                      ]
                    }
                  },
                  "required": [
                    "channel"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized to create channels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating lack of permissions"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/getChannelConversationInfo": {
      "post": {
        "operationId": "getChannelConversationInfo",
        "summary": "Retrieves detailed information about a specific Slack channel.",
        "description": "The getChannelConversationInfo function fetches comprehensive data about a given Slack channel using its ID. It returns a conversation object containing various properties that describe the channel's characteristics, including its type (public, private, direct message, etc.), creation details, sharing status, and other relevant metadata.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getChannelConversationInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for retrieving channel conversation information",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel to get information about"
                          }
                        },
                        "required": [
                          "channelId"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the conversation"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the channel-like thing, without a leading hash sign"
                        },
                        "is_channel": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is a channel"
                        },
                        "is_group": {
                          "type": "boolean",
                          "description": "Means the channel is a private channel created before March 2021"
                        },
                        "is_im": {
                          "type": "boolean",
                          "description": "Means the conversation is a direct message between two individuals or a user and a bot"
                        },
                        "is_mpim": {
                          "type": "boolean",
                          "description": "Represents an unnamed private conversation between multiple users"
                        },
                        "is_private": {
                          "type": "boolean",
                          "description": "Means the conversation is privileged between two or more members"
                        },
                        "created": {
                          "type": "integer",
                          "description": "Timestamp of when the conversation was created"
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the member that created this conversation"
                        },
                        "is_archived": {
                          "type": "boolean",
                          "description": "Indicates a conversation is archived"
                        },
                        "is_general": {
                          "type": "boolean",
                          "description": "Means the channel is the workspace's general discussion channel"
                        },
                        "unlinked": {
                          "type": "integer"
                        },
                        "name_normalized": {
                          "type": "string",
                          "description": "The normalized name of a channel"
                        },
                        "is_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is shared between multiple workspaces"
                        },
                        "is_frozen": {
                          "type": "boolean",
                          "description": "Indicates that the channel is frozen"
                        },
                        "is_org_shared": {
                          "type": "boolean",
                          "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization"
                        },
                        "is_pending_ext_shared": {
                          "type": "boolean",
                          "description": "Means the conversation is ready to become an is_ext_shared channel, but needs approval"
                        },
                        "pending_shared": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of team IDs that have been invited to the channel but have not yet joined"
                        },
                        "context_team_id": {
                          "type": "string",
                          "description": "The team ID of the team that this channel belongs to"
                        },
                        "updated": {
                          "type": "integer",
                          "description": "The timestamp, in milliseconds, when the channel settings were updated"
                        },
                        "parent_conversation": {
                          "type": "string",
                          "description": "The ID of the parent conversation, present for threaded messages"
                        },
                        "is_ext_shared": {
                          "type": "boolean",
                          "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization"
                        },
                        "shared_team_ids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of team IDs that are part of this shared channel"
                        },
                        "pending_connected_team_ids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted"
                        },
                        "is_member": {
                          "type": "boolean",
                          "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation"
                        },
                        "topic": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "creator": {
                              "type": "string"
                            },
                            "last_set": {
                              "type": "integer"
                            }
                          },
                          "description": "Provides information about the channel topic"
                        },
                        "purpose": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "creator": {
                              "type": "string"
                            },
                            "last_set": {
                              "type": "integer"
                            }
                          },
                          "description": "Provides information about the channel purpose"
                        },
                        "previous_names": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "A list of previous names for the channel"
                        },
                        "num_members": {
                          "type": "integer",
                          "description": "The number of members in the conversation"
                        },
                        "locale": {
                          "type": "string",
                          "description": "The locale for this conversation"
                        },
                        "last_read": {
                          "type": "integer",
                          "description": "The timestamp for the last message the calling user has read in this channel"
                        },
                        "latest": {
                          "type": "string",
                          "description": "The latest message in the channel"
                        },
                        "unread_count": {
                          "type": "integer",
                          "description": "A full count of visible messages that the calling user has yet to read"
                        },
                        "unread_count_display": {
                          "type": "integer",
                          "description": "A count of messages that the calling user has yet to read that matter to them"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "is_channel",
                        "created",
                        "creator"
                      ]
                    }
                  },
                  "required": [
                    "conversation"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid channel ID or other client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel does not exist or user doesn't have access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getFileInfo": {
      "post": {
        "operationId": "getFileInfo",
        "summary": "Get information about a specified file in Slack.",
        "description": "The getFileInfo function retrieves detailed information about a file in Slack using its file ID. It returns a comprehensive file object containing various attributes such as file metadata, sharing details, and related channel information. This function is useful for obtaining in-depth details about a specific file within a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getFileInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for the getFileInfo function",
                        "properties": {
                          "fileId": {
                            "type": "string",
                            "description": "The ID of the file to get information for."
                          }
                        },
                        "required": [
                          "fileId"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with file information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the file object."
                    },
                    "created": {
                      "type": "integer",
                      "description": "A Unix timestamp representing when the file was created."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "A deprecated property that is provided only for backwards compatibility with older clients."
                    },
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "description": "Name of the file; may be null for unnamed files."
                    },
                    "title": {
                      "type": "string",
                      "description": "Title of the file."
                    },
                    "mimetype": {
                      "type": "string",
                      "description": "The file's mimetype."
                    },
                    "filetype": {
                      "type": "string",
                      "description": "The file's type."
                    },
                    "pretty_type": {
                      "type": "string",
                      "description": "A human-readable version of the type."
                    },
                    "user": {
                      "type": "string",
                      "description": "The ID of the user who created the object."
                    },
                    "editable": {
                      "type": "boolean",
                      "description": "Indicates that files are stored in editable mode."
                    },
                    "size": {
                      "type": "integer",
                      "description": "The filesize in bytes."
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "hosted",
                        "external",
                        "snippet",
                        "post"
                      ],
                      "description": "The mode of the file."
                    },
                    "is_external": {
                      "type": "boolean",
                      "description": "Indicates whether the master copy of a file is stored within the system or not."
                    },
                    "external_type": {
                      "type": "string",
                      "description": "Indicates what kind of external file it is, e.g. 'dropbox' or 'gdoc'."
                    },
                    "is_public": {
                      "type": "boolean",
                      "description": "true if the file is public."
                    },
                    "public_url_shared": {
                      "type": "boolean",
                      "description": "true if the file's public URL has been shared."
                    },
                    "url_private": {
                      "type": "string",
                      "description": "A URL to the file contents. This requires an authorization header to access."
                    },
                    "permalink": {
                      "type": "string",
                      "description": "A URL to a page for the file containing details, comments and a download link."
                    },
                    "channels": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Contains the IDs of any channels into which the file is currently shared."
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Contains the IDs of any private groups into which the file is currently shared."
                    },
                    "ims": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Contains the IDs of any IM channels into which the file is currently shared."
                    },
                    "comments_count": {
                      "type": "integer",
                      "description": "The number of comments on the file."
                    }
                  },
                  "required": [
                    "id",
                    "created",
                    "user",
                    "size"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error (e.g., malformed request syntax, invalid file ID).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified file could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the file was not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getUserInfo": {
      "post": {
        "operationId": "getUserInfo",
        "summary": "Retrieves detailed information about a specific Slack user.",
        "description": "The getUserInfo function fetches comprehensive details about a Slack user using their unique user ID. It returns a rich user object containing various attributes including personal information, team association, permissions, and profile details. This function is essential for applications that need to access or display user-specific data within a Slack workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the getUserInfo sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for the getUserInfo function",
                        "properties": {
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user to get information for."
                          }
                        },
                        "required": [
                          "userId"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The user's ID."
                    },
                    "team_id": {
                      "type": "string",
                      "description": "The ID of the team the user belongs to."
                    },
                    "name": {
                      "type": "string",
                      "description": "The user's username."
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "True if the user has been deleted."
                    },
                    "color": {
                      "type": "string",
                      "description": "A hexadecimal color code that is used to color the user's name in Slack clients."
                    },
                    "real_name": {
                      "type": "string",
                      "description": "The user's real name."
                    },
                    "tz": {
                      "type": "string",
                      "description": "The user's timezone (e.g., America/Los_Angeles)."
                    },
                    "tz_label": {
                      "type": "string",
                      "description": "A human-readable string for the user's timezone."
                    },
                    "tz_offset": {
                      "type": "integer",
                      "description": "The user's timezone offset in seconds."
                    },
                    "profile": {
                      "type": "object",
                      "description": "A profile object containing more details about the user.",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The user's title."
                        },
                        "phone": {
                          "type": "string",
                          "description": "The user's phone number."
                        },
                        "skype": {
                          "type": "string",
                          "description": "The user's Skype username."
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's real name."
                        },
                        "real_name_normalized": {
                          "type": "string",
                          "description": "The user's real name, normalized."
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The user's display name."
                        },
                        "display_name_normalized": {
                          "type": "string",
                          "description": "The user's display name, normalized."
                        },
                        "status_text": {
                          "type": "string",
                          "description": "The user's status text."
                        },
                        "status_emoji": {
                          "type": "string",
                          "description": "The user's status emoji."
                        },
                        "avatar_hash": {
                          "type": "string",
                          "description": "A hash of the user's avatar image."
                        },
                        "image_original": {
                          "type": "string",
                          "description": "The URL of the user's original-sized profile image."
                        },
                        "image_24": {
                          "type": "string",
                          "description": "The URL of the user's 24x24 profile image."
                        },
                        "image_32": {
                          "type": "string",
                          "description": "The URL of the user's 32x32 profile image."
                        },
                        "image_48": {
                          "type": "string",
                          "description": "The URL of the user's 48x48 profile image."
                        },
                        "image_72": {
                          "type": "string",
                          "description": "The URL of the user's 72x72 profile image."
                        },
                        "image_192": {
                          "type": "string",
                          "description": "The URL of the user's 192x192 profile image."
                        },
                        "image_512": {
                          "type": "string",
                          "description": "The URL of the user's 512x512 profile image."
                        },
                        "team": {
                          "type": "string",
                          "description": "The ID of the team the user belongs to."
                        }
                      }
                    },
                    "is_admin": {
                      "type": "boolean",
                      "description": "True if the user is an admin."
                    },
                    "is_owner": {
                      "type": "boolean",
                      "description": "True if the user is an owner."
                    },
                    "is_primary_owner": {
                      "type": "boolean",
                      "description": "True if the user is the primary owner."
                    },
                    "is_restricted": {
                      "type": "boolean",
                      "description": "True if the user is a restricted user (single-channel guest)."
                    },
                    "is_ultra_restricted": {
                      "type": "boolean",
                      "description": "True if the user is an ultra-restricted user (multi-channel guest)."
                    },
                    "is_bot": {
                      "type": "boolean",
                      "description": "True if the user is a bot."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "A timestamp of when the user's profile was last updated."
                    },
                    "is_app_user": {
                      "type": "boolean",
                      "description": "True if the user is an app user."
                    },
                    "has_2fa": {
                      "type": "boolean",
                      "description": "True if the user has two-factor authentication enabled."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This could occur if the userId is invalid or not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found. This could occur if the provided userId does not correspond to any existing user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. This could occur due to issues with the Slack API or server-side problems.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/listChannels": {
      "post": {
        "operationId": "listChannels",
        "summary": "Lists all public and private channels in a Slack workspace.",
        "description": "The listChannels function retrieves a comprehensive list of all channels within a Slack workspace, including both public and private channels. It returns detailed information about each channel, such as its ID, name, privacy settings, creation details, and various flags indicating its status and type. This function is useful for obtaining an overview of the workspace's structure and available communication channels.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listChannels sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "This method does not take any arguments.",
                        "properties": {}
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the conversation."
                      },
                      "name": {
                        "type": "string",
                        "description": "Indicates the name of the channel-like thing, without a leading hash sign."
                      },
                      "is_channel": {
                        "type": "boolean",
                        "description": "Indicates whether a conversation is a channel."
                      },
                      "is_group": {
                        "type": "boolean",
                        "description": "Means the channel is a private channel created before March 2021."
                      },
                      "is_im": {
                        "type": "boolean",
                        "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                      },
                      "is_mpim": {
                        "type": "boolean",
                        "description": "Represents an unnamed private conversation between multiple users."
                      },
                      "is_private": {
                        "type": "boolean",
                        "description": "Means the conversation is privileged between two or more members."
                      },
                      "created": {
                        "type": "integer",
                        "description": "Timestamp of when the conversation was created."
                      },
                      "creator": {
                        "type": "string",
                        "description": "The ID of the member that created this conversation."
                      },
                      "is_archived": {
                        "type": "boolean",
                        "description": "Indicates a conversation is archived, frozen in time."
                      },
                      "is_general": {
                        "type": "boolean",
                        "description": "Means the channel is the workspace's \"general\" discussion channel."
                      },
                      "unlinked": {
                        "type": "integer"
                      },
                      "name_normalized": {
                        "type": "string",
                        "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                      },
                      "is_shared": {
                        "type": "boolean",
                        "description": "Means the conversation is in some way shared between multiple workspaces."
                      },
                      "is_frozen": {
                        "type": "boolean",
                        "description": "Indicates that the channel is frozen."
                      },
                      "is_org_shared": {
                        "type": "boolean",
                        "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                      },
                      "is_pending_ext_shared": {
                        "type": "boolean",
                        "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                      },
                      "pending_shared": {
                        "type": "array",
                        "description": "A list of team IDs that have been invited to the channel but have not yet joined.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "context_team_id": {
                        "type": "string",
                        "description": "The team ID of the team that this channel belongs to."
                      },
                      "updated": {
                        "type": "integer",
                        "description": "The timestamp, in milliseconds, when the channel settings were updated."
                      },
                      "parent_conversation": {
                        "type": "string",
                        "description": "The ID of the parent conversation. This is present for threaded messages."
                      },
                      "is_ext_shared": {
                        "type": "boolean",
                        "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                      },
                      "shared_team_ids": {
                        "type": "array",
                        "description": "A list of team IDs that are part of this shared channel.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "pending_connected_team_ids": {
                        "type": "array",
                        "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "is_member": {
                        "type": "boolean",
                        "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                      },
                      "topic": {
                        "type": "object",
                        "description": "Provides information about the channel topic.",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "creator": {
                            "type": "string"
                          },
                          "last_set": {
                            "type": "integer"
                          }
                        }
                      },
                      "purpose": {
                        "type": "object",
                        "description": "Provides information about the channel purpose.",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "creator": {
                            "type": "string"
                          },
                          "last_set": {
                            "type": "integer"
                          }
                        }
                      },
                      "previous_names": {
                        "type": "array",
                        "description": "A list of previous names for the channel.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "num_members": {
                        "type": "integer",
                        "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                      },
                      "last_read": {
                        "type": "integer",
                        "description": "The timestamp for the last message the calling user has read in this channel."
                      },
                      "latest": {
                        "type": "string",
                        "description": "The latest message in the channel."
                      },
                      "unread_count": {
                        "type": "integer",
                        "description": "A full count of visible messages that the calling user has yet to read."
                      },
                      "unread_count_display": {
                        "type": "integer",
                        "description": "A count of messages that the calling user has yet to read that matter to them."
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "is_channel",
                      "created"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The server understood the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/listChannelUsers": {
      "post": {
        "operationId": "listChannelUsers",
        "summary": "Lists all users in a specific Slack channel.",
        "description": "The listChannelUsers function retrieves an array of user IDs for all members in a specified Slack channel. It requires a valid channel ID as input and returns a list of user IDs. This function is useful for obtaining a comprehensive list of participants in a particular Slack channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listChannelUsers sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for listing channel users",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel to get the members of."
                          }
                        },
                        "required": [
                          "channelId"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with an array of user IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "User ID"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid channel ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Bot does not have permission to access the channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/listUsers": {
      "post": {
        "operationId": "listUsers",
        "summary": "Lists all users in a Slack workspace.",
        "description": "The listUsers function retrieves information about all users in a Slack workspace. It returns an array of user objects, each containing detailed information about a workspace user including their profile, permissions, and various attributes. This function is useful for obtaining a comprehensive overview of the workspace's user base.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the listUsers sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "This function does not accept any parameters.",
                        "properties": {}
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Identifier for this workspace user. It is unique to the workspace containing the user."
                      },
                      "team_id": {
                        "type": "string",
                        "description": "The ID of the team the user belongs to."
                      },
                      "name": {
                        "type": "string",
                        "description": "The username of the user."
                      },
                      "deleted": {
                        "type": "boolean",
                        "description": "Indicates if the user has been deactivated."
                      },
                      "color": {
                        "type": "string",
                        "description": "Used in some clients to display a special username color."
                      },
                      "real_name": {
                        "type": "string",
                        "description": "The user's first and last name."
                      },
                      "tz": {
                        "type": "string",
                        "description": "A human-readable string for the geographic timezone-related region this user has specified in their account."
                      },
                      "tz_label": {
                        "type": "string",
                        "description": "Describes the commonly used name of the tz timezone."
                      },
                      "tz_offset": {
                        "type": "integer",
                        "description": "Indicates the number of seconds to offset UTC time by for this user's tz."
                      },
                      "profile": {
                        "type": "object",
                        "description": "The profile object contains the default fields of a user's workspace profile.",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "The user's title."
                          },
                          "phone": {
                            "type": "string",
                            "description": "The user's phone number, in any format."
                          },
                          "skype": {
                            "type": "string",
                            "description": "The user's Skype handle."
                          },
                          "real_name": {
                            "type": "string",
                            "description": "The user's first and last name."
                          },
                          "real_name_normalized": {
                            "type": "string",
                            "description": "The real_name field, but with any non-Latin characters filtered out."
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The display name the user has chosen to identify themselves by in their workspace profile."
                          },
                          "display_name_normalized": {
                            "type": "string",
                            "description": "The display_name field, but with any non-Latin characters filtered out."
                          },
                          "fields": {
                            "type": "object",
                            "description": "All the custom profile fields for the user."
                          },
                          "status_text": {
                            "type": "string",
                            "description": "The displayed text of up to 100 characters."
                          },
                          "status_emoji": {
                            "type": "string",
                            "description": "The displayed emoji that is enabled for the Slack team, such as :train:."
                          },
                          "status_expiration": {
                            "type": "integer",
                            "description": "The Unix timestamp of when the status will expire."
                          },
                          "avatar_hash": {
                            "type": "string",
                            "description": "A hash of the user's avatar."
                          },
                          "start_date": {
                            "type": "string",
                            "description": "The date the person joined the organization."
                          },
                          "image_original": {
                            "type": "string",
                            "description": "URL to the original size of the user's profile picture."
                          },
                          "is_custom_image": {
                            "type": "boolean",
                            "description": "Indicates if the user has a custom profile picture."
                          },
                          "email": {
                            "type": "string",
                            "description": "A valid email address. Requires users:read.email scope."
                          },
                          "pronouns": {
                            "type": "string",
                            "description": "The pronouns the user prefers to be addressed by."
                          },
                          "first_name": {
                            "type": "string",
                            "description": "The user's first name."
                          },
                          "last_name": {
                            "type": "string",
                            "description": "The user's last name."
                          },
                          "image_24": {
                            "type": "string",
                            "description": "URL to a 24x24 pixel version of the user's profile picture."
                          },
                          "image_32": {
                            "type": "string",
                            "description": "URL to a 32x32 pixel version of the user's profile picture."
                          },
                          "image_48": {
                            "type": "string",
                            "description": "URL to a 48x48 pixel version of the user's profile picture."
                          },
                          "image_72": {
                            "type": "string",
                            "description": "URL to a 72x72 pixel version of the user's profile picture."
                          },
                          "image_192": {
                            "type": "string",
                            "description": "URL to a 192x192 pixel version of the user's profile picture."
                          },
                          "image_512": {
                            "type": "string",
                            "description": "URL to a 512x512 pixel version of the user's profile picture."
                          },
                          "image_1024": {
                            "type": "string",
                            "description": "URL to a 1024x1024 pixel version of the user's profile picture."
                          },
                          "status_text_canonical": {
                            "type": "string"
                          },
                          "team": {
                            "type": "string",
                            "description": "The ID of the team the user is on."
                          }
                        }
                      },
                      "is_admin": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an Admin of the current workspace."
                      },
                      "is_owner": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an Owner of the current workspace."
                      },
                      "is_primary_owner": {
                        "type": "boolean",
                        "description": "Indicates whether the user is the Primary Owner of the current workspace."
                      },
                      "is_restricted": {
                        "type": "boolean",
                        "description": "Indicates whether or not the user is a guest user."
                      },
                      "is_ultra_restricted": {
                        "type": "boolean",
                        "description": "Indicates whether or not the user is a single-channel guest."
                      },
                      "is_bot": {
                        "type": "boolean",
                        "description": "Indicates whether the user is a bot user."
                      },
                      "is_app_user": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an authorized user of the calling app."
                      },
                      "updated": {
                        "type": "string",
                        "description": "A Unix timestamp indicating when the user object was last updated."
                      },
                      "is_email_confirmed": {
                        "type": "boolean",
                        "description": "Indicates if the user's email address has been confirmed."
                      },
                      "who_can_share_contact_card": {
                        "type": "string",
                        "description": "Who can share the user's contact card."
                      },
                      "enterprise_user": {
                        "type": "object",
                        "description": "An object containing info related to an Enterprise Grid user."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user doesn't have permissions for the requested operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure or lack of permissions."
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the rate limit has been exceeded."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/messageChannel": {
      "post": {
        "operationId": "messageChannel",
        "summary": "Send a message to a specific Slack channel.",
        "description": "The messageChannel function allows sending a text message to a specified Slack channel using the Microfox Slack client. It takes the channel ID and the message text as input, and returns details about the sent message including its timestamp and channel information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the messageChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for sending a message to a Slack channel",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel to send the message to"
                          },
                          "text": {
                            "type": "string",
                            "description": "The text of the message to be sent"
                          }
                        },
                        "required": [
                          "channelId",
                          "text"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message"
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message"
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message"
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message"
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message"
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "const": "channel_not_found"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "const": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/messageUser": {
      "post": {
        "operationId": "messageUser",
        "summary": "Send a direct message to a user on Slack.",
        "description": "This function allows sending a direct message to a specified user on Slack using their user ID. It provides a simple way to programmatically send messages to individual users. The function returns details about the sent message, including its timestamp and the channel where it was posted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the messageUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for sending a direct message to a user",
                        "properties": {
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user to send the message to"
                          },
                          "text": {
                            "type": "string",
                            "description": "The text content of the message to be sent"
                          }
                        },
                        "required": [
                          "userId",
                          "text"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "Details of the sent message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message"
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message"
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message"
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message"
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message"
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user doesn't have permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Application has exceeded its rate limit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reactMessage": {
      "post": {
        "operationId": "reactMessage",
        "summary": "Add a reaction emoji to a Slack message.",
        "description": "The reactMessage function allows adding an emoji reaction to a specific message in a Slack channel. It requires the channel ID, message timestamp, and the name of the emoji to be used as the reaction. This function is part of the MicrofoxSlackClient and interacts with Slack's API to perform the reaction action.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the reactMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for adding a reaction to a Slack message",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel where the message is located"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "The timestamp of the message to react to"
                          },
                          "reaction": {
                            "type": "string",
                            "description": "The name of the emoji to use for the reaction (e.g., 'tada', 'thumbsup')"
                          }
                        },
                        "required": [
                          "channelId",
                          "timestamp",
                          "reaction"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful"
                    }
                  },
                  "required": [
                    "ok"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue with the request"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the channel or message was not found"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the rate limit has been exceeded"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/removeUserFromChannel": {
      "post": {
        "operationId": "removeUserFromChannel",
        "summary": "Removes a user from a specified Slack channel.",
        "description": "This function removes a user from a Slack channel using the provided channel ID and user ID. It interacts with the Slack API to perform the removal operation and returns a boolean indicating the success of the request.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the removeUserFromChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for removing a user from a channel",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel to remove the user from."
                          },
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user to remove from the channel."
                          }
                        },
                        "required": [
                          "channelId",
                          "userId"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful."
                    }
                  },
                  "required": [
                    "ok"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid channel ID or user ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the reason for the bad request."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating insufficient permissions."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found - channel or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the channel or user was not found."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the internal server error."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/replyMessage": {
      "post": {
        "operationId": "replyMessage",
        "summary": "Send a threaded reply to a message in a Slack channel.",
        "description": "This function allows sending a reply to a specific message in a Slack channel, creating or continuing a thread. It takes the channel ID, the timestamp of the original message, and the reply text as inputs. The function returns details about the sent message, including its timestamp and channel information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the replyMessage sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for sending a reply message",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel where the message is"
                          },
                          "thread_ts": {
                            "type": "string",
                            "description": "The timestamp of the message to reply to, which identifies the thread"
                          },
                          "text": {
                            "type": "string",
                            "description": "The text of the reply"
                          }
                        },
                        "required": [
                          "channelId",
                          "thread_ts",
                          "text"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "channel": {
                      "type": "string",
                      "description": "The ID of the channel where the message was posted"
                    },
                    "ts": {
                      "type": "string",
                      "description": "The timestamp of the message"
                    },
                    "message": {
                      "type": "object",
                      "description": "An object containing the details of the sent message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of message"
                        },
                        "subtype": {
                          "type": "string",
                          "description": "The subtype of the message"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message"
                        },
                        "ts": {
                          "type": "string",
                          "description": "The timestamp of the message"
                        },
                        "bot_id": {
                          "type": "string",
                          "description": "The ID of the bot that sent the message"
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the bot that sent the message"
                        },
                        "attachments": {
                          "type": "array",
                          "description": "An array of attachments",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ok",
                    "channel",
                    "ts",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Channel or message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/searchChannel": {
      "post": {
        "operationId": "searchChannel",
        "summary": "Searches for a Slack channel by its name.",
        "description": "The searchChannel function finds a Slack channel by its name, performing a case-insensitive search. It returns a detailed conversation object if the channel is found, or undefined if no matching channel is located. This function is useful for retrieving channel information without knowing the exact channel ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the searchChannel sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "The parameters for the searchChannel function.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the channel to find (case-insensitive)."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the conversation."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the channel-like thing, without a leading hash sign."
                    },
                    "is_channel": {
                      "type": "boolean",
                      "description": "Indicates whether a conversation is a channel."
                    },
                    "is_group": {
                      "type": "boolean",
                      "description": "Means the channel is a private channel created before March 2021."
                    },
                    "is_im": {
                      "type": "boolean",
                      "description": "Means the conversation is a direct message between two distinguished individuals or a user and a bot."
                    },
                    "is_mpim": {
                      "type": "boolean",
                      "description": "Represents an unnamed private conversation between multiple users."
                    },
                    "is_private": {
                      "type": "boolean",
                      "description": "Means the conversation is privileged between two or more members."
                    },
                    "created": {
                      "type": "integer",
                      "description": "Timestamp of when the conversation was created."
                    },
                    "creator": {
                      "type": "string",
                      "description": "The ID of the member that created this conversation."
                    },
                    "is_archived": {
                      "type": "boolean",
                      "description": "Indicates a conversation is archived, frozen in time."
                    },
                    "is_general": {
                      "type": "boolean",
                      "description": "Means the channel is the workspace's \"general\" discussion channel."
                    },
                    "unlinked": {
                      "type": "integer",
                      "description": "Unlinked timestamp."
                    },
                    "name_normalized": {
                      "type": "string",
                      "description": "The \"normalized\" name of a channel, which may be different from `name` due to legacy naming rules."
                    },
                    "is_shared": {
                      "type": "boolean",
                      "description": "Means the conversation is in some way shared between multiple workspaces."
                    },
                    "is_frozen": {
                      "type": "boolean",
                      "description": "Indicates that the channel is frozen."
                    },
                    "is_org_shared": {
                      "type": "boolean",
                      "description": "Indicates whether this shared channel is shared between Enterprise Grid workspaces within the same organization."
                    },
                    "is_pending_ext_shared": {
                      "type": "boolean",
                      "description": "Means the conversation is ready to become an `is_ext_shared` channel, but needs some kind of approval or sign off first."
                    },
                    "pending_shared": {
                      "type": "array",
                      "description": "A list of team IDs that have been invited to the channel but have not yet joined.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "context_team_id": {
                      "type": "string",
                      "description": "The team ID of the team that this channel belongs to."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "The timestamp, in milliseconds, when the channel settings were updated."
                    },
                    "parent_conversation": {
                      "type": "string",
                      "description": "The ID of the parent conversation. This is present for threaded messages."
                    },
                    "is_ext_shared": {
                      "type": "boolean",
                      "description": "Indicates whether a conversation is part of a Shared Channel with a remote organization."
                    },
                    "shared_team_ids": {
                      "type": "array",
                      "description": "A list of team IDs that are part of this shared channel.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pending_connected_team_ids": {
                      "type": "array",
                      "description": "A list of team IDs that have been invited to connect to the channel but have not yet accepted.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "is_member": {
                      "type": "boolean",
                      "description": "Indicates whether the user, bot user or Slack app associated with the token making the API call is itself a member of the conversation."
                    },
                    "topic": {
                      "type": "object",
                      "description": "Provides information about the channel topic.",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "creator": {
                          "type": "string"
                        },
                        "last_set": {
                          "type": "integer"
                        }
                      }
                    },
                    "purpose": {
                      "type": "object",
                      "description": "Provides information about the channel purpose.",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "creator": {
                          "type": "string"
                        },
                        "last_set": {
                          "type": "integer"
                        }
                      }
                    },
                    "previous_names": {
                      "type": "array",
                      "description": "A list of previous names for the channel.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "num_members": {
                      "type": "integer",
                      "description": "The number of members in the conversation. This field is only present if `include_num_members` is true in the request."
                    },
                    "locale": {
                      "type": "string",
                      "description": "The locale for this conversation. This field is only present if `include_locale` is true in the request."
                    },
                    "last_read": {
                      "type": "integer",
                      "description": "The timestamp for the last message the calling user has read in this channel."
                    },
                    "latest": {
                      "type": "string",
                      "description": "The latest message in the channel."
                    },
                    "unread_count": {
                      "type": "integer",
                      "description": "A full count of visible messages that the calling user has yet to read."
                    },
                    "unread_count_display": {
                      "type": "integer",
                      "description": "A count of messages that the calling user has yet to read that matter to them."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the bad request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The requested channel was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating that the channel was not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/searchUser": {
      "post": {
        "operationId": "searchUser",
        "summary": "Searches for a user in a Slack workspace by their email address.",
        "description": "The searchUser function allows you to find a user in a Slack workspace using their email address. It returns a comprehensive user object containing detailed information about the user, including their profile data, permissions, and various attributes related to their account and status within the workspace.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the searchUser sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "The parameters for the searchUser function",
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "The email address of the user to find.",
                            "format": "email"
                          }
                        },
                        "required": [
                          "email"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the workspace user"
                    },
                    "team_id": {
                      "type": "string",
                      "description": "The ID of the team the user belongs to"
                    },
                    "name": {
                      "type": "string",
                      "description": "The username of the user"
                    },
                    "deleted": {
                      "type": "boolean",
                      "description": "Indicates if the user has been deactivated"
                    },
                    "color": {
                      "type": "string",
                      "description": "Used in some clients to display a special username color"
                    },
                    "real_name": {
                      "type": "string",
                      "description": "The user's first and last name"
                    },
                    "tz": {
                      "type": "string",
                      "description": "A human-readable string for the geographic timezone-related region"
                    },
                    "tz_label": {
                      "type": "string",
                      "description": "Describes the commonly used name of the tz timezone"
                    },
                    "tz_offset": {
                      "type": "integer",
                      "description": "Number of seconds to offset UTC time by for this user's tz"
                    },
                    "profile": {
                      "type": "object",
                      "description": "The profile object contains the default fields of a user's workspace profile",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The user's title"
                        },
                        "phone": {
                          "type": "string",
                          "description": "The user's phone number, in any format"
                        },
                        "skype": {
                          "type": "string",
                          "description": "The user's Skype handle"
                        },
                        "real_name": {
                          "type": "string",
                          "description": "The user's first and last name"
                        },
                        "real_name_normalized": {
                          "type": "string",
                          "description": "The real_name field, but with any non-Latin characters filtered out"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The display name the user has chosen to identify themselves by in their workspace profile"
                        },
                        "display_name_normalized": {
                          "type": "string",
                          "description": "The display_name field, but with any non-Latin characters filtered out"
                        },
                        "fields": {
                          "type": "object",
                          "description": "All the custom profile fields for the user"
                        },
                        "status_text": {
                          "type": "string",
                          "description": "The displayed text of up to 100 characters"
                        },
                        "status_emoji": {
                          "type": "string",
                          "description": "The displayed emoji that is enabled for the Slack team"
                        },
                        "status_expiration": {
                          "type": "integer",
                          "description": "The Unix timestamp of when the status will expire"
                        },
                        "avatar_hash": {
                          "type": "string",
                          "description": "A hash of the user's avatar"
                        },
                        "start_date": {
                          "type": "string",
                          "description": "The date the person joined the organization"
                        },
                        "image_original": {
                          "type": "string",
                          "description": "URL to the original size of the user's profile picture"
                        },
                        "is_custom_image": {
                          "type": "boolean",
                          "description": "Indicates if the user has a custom profile picture"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "A valid email address. Requires users:read.email scope"
                        },
                        "pronouns": {
                          "type": "string",
                          "description": "The pronouns the user prefers to be addressed by"
                        },
                        "first_name": {
                          "type": "string",
                          "description": "The user's first name"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "The user's last name"
                        },
                        "image_24": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to a 24x24 pixel version of the user's profile picture"
                        },
                        "image_32": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to a 32x32 pixel version of the user's profile picture"
                        },
                        "image_48": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to a 48x48 pixel version of the user's profile picture"
                        },
                        "image_72": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to a 72x72 pixel version of the user's profile picture"
                        },
                        "image_192": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to a 192x192 pixel version of the user's profile picture"
                        },
                        "image_512": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to a 512x512 pixel version of the user's profile picture"
                        },
                        "image_1024": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to a 1024x1024 pixel version of the user's profile picture"
                        },
                        "status_text_canonical": {
                          "type": "string"
                        },
                        "team": {
                          "type": "string",
                          "description": "The ID of the team the user is on"
                        }
                      }
                    },
                    "is_admin": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an Admin of the current workspace"
                    },
                    "is_owner": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an Owner of the current workspace"
                    },
                    "is_primary_owner": {
                      "type": "boolean",
                      "description": "Indicates whether the user is the Primary Owner of the current workspace"
                    },
                    "is_restricted": {
                      "type": "boolean",
                      "description": "Indicates whether or not the user is a guest user"
                    },
                    "is_ultra_restricted": {
                      "type": "boolean",
                      "description": "Indicates whether or not the user is a single-channel guest"
                    },
                    "is_bot": {
                      "type": "boolean",
                      "description": "Indicates whether the user is a bot user"
                    },
                    "is_app_user": {
                      "type": "boolean",
                      "description": "Indicates whether the user is an authorized user of the calling app"
                    },
                    "updated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A Unix timestamp indicating when the user object was last updated"
                    },
                    "is_email_confirmed": {
                      "type": "boolean",
                      "description": "Indicates if the user's email address has been confirmed"
                    },
                    "who_can_share_contact_card": {
                      "type": "string",
                      "description": "Who can share the user's contact card"
                    },
                    "enterprise_user": {
                      "type": "object",
                      "description": "An object containing info related to an Enterprise Grid user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server cannot process the request due to a client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified user could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message indicating the user was not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sendFile": {
      "post": {
        "operationId": "sendFile",
        "summary": "Upload a file to a Slack channel.",
        "description": "The sendFile function allows users to upload a file to a specified Slack channel. It takes the channel ID, file content, filename, and an optional title as input. The function returns details about the uploaded file, including its ID, type, size, and sharing information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the sendFile sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for sending a file to a Slack channel",
                        "properties": {
                          "channelId": {
                            "type": "string",
                            "description": "The ID of the channel to upload the file to. Can be a comma-separated list."
                          },
                          "file": {
                            "type": "string",
                            "format": "binary",
                            "description": "The content of the file to be uploaded."
                          },
                          "filename": {
                            "type": "string",
                            "description": "The name of the file."
                          },
                          "title": {
                            "type": "string",
                            "description": "A title for the file."
                          }
                        },
                        "required": [
                          "channelId",
                          "file",
                          "filename"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "created": {
                          "type": "integer"
                        },
                        "timestamp": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "title": {
                          "type": "string"
                        },
                        "mimetype": {
                          "type": "string"
                        },
                        "filetype": {
                          "type": "string"
                        },
                        "pretty_type": {
                          "type": "string"
                        },
                        "user": {
                          "type": "string"
                        },
                        "editable": {
                          "type": "boolean"
                        },
                        "size": {
                          "type": "integer"
                        },
                        "mode": {
                          "type": "string",
                          "enum": [
                            "hosted",
                            "external",
                            "snippet",
                            "post"
                          ]
                        },
                        "is_external": {
                          "type": "boolean"
                        },
                        "external_type": {
                          "type": "string"
                        },
                        "is_public": {
                          "type": "boolean"
                        },
                        "public_url_shared": {
                          "type": "boolean"
                        },
                        "url_private": {
                          "type": "string"
                        },
                        "permalink": {
                          "type": "string"
                        },
                        "channels": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "ims": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "comments_count": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id",
                        "created",
                        "timestamp",
                        "title",
                        "mimetype",
                        "filetype",
                        "pretty_type",
                        "user",
                        "editable",
                        "size",
                        "mode",
                        "is_external",
                        "is_public",
                        "public_url_shared",
                        "url_private",
                        "permalink",
                        "channels",
                        "groups",
                        "ims",
                        "comments_count"
                      ]
                    }
                  },
                  "required": [
                    "file"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The request requires user authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The server understood the request but refuses to authorize it.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large - The file size exceeds the maximum allowed size.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/setReminder": {
      "post": {
        "operationId": "setReminder",
        "summary": "Sets a reminder for a user in Slack.",
        "description": "The setReminder function allows setting a reminder for a specified Slack user. It takes the user ID, reminder text, and time as inputs, and returns the details of the created reminder. This function integrates with the Slack API to manage user reminders efficiently.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "object",
                    "description": "Body of the setReminder sls call",
                    "properties": {
                      "arguments": {
                        "type": "object",
                        "description": "Parameters for setting a reminder",
                        "properties": {
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user to set the reminder for"
                          },
                          "text": {
                            "type": "string",
                            "description": "The text of the reminder"
                          },
                          "time": {
                            "type": "string",
                            "description": "A string describing when the reminder should fire (e.g., \"in 5 minutes\", \"at 10:30am\", or a Unix timestamp)"
                          }
                        },
                        "required": [
                          "userId",
                          "text",
                          "time"
                        ]
                      },
                      "constructor": {
                        "type": "string",
                        "description": "Name of the constructor to use.",
                        "enum": [
                          "MicrofoxSlackClient"
                        ]
                      }
                    },
                    "required": [
                      "arguments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "true if the request was successful"
                    },
                    "reminder": {
                      "type": "object",
                      "description": "An object containing the details of the created reminder",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the reminder"
                        },
                        "creator": {
                          "type": "string",
                          "description": "The ID of the user who created the reminder"
                        },
                        "user": {
                          "type": "string",
                          "description": "The ID of the user the reminder is for"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the reminder"
                        },
                        "recurring": {
                          "type": "boolean",
                          "description": "Whether the reminder is recurring"
                        },
                        "time": {
                          "type": "integer",
                          "description": "The timestamp of when the reminder will fire"
                        },
                        "complete_ts": {
                          "type": "integer",
                          "description": "The timestamp of when the reminder was completed"
                        }
                      },
                      "required": [
                        "id",
                        "creator",
                        "user",
                        "text",
                        "recurring",
                        "time"
                      ]
                    }
                  },
                  "required": [
                    "ok",
                    "reminder"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was invalid or cannot be served",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the issue"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user doesn't have permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message indicating authentication failure"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it doesn't know how to handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "enum": [
                        false
                      ],
                      "description": "Indicates the request was unsuccessful"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message describing the server error"
                    }
                  },
                  "required": [
                    "ok",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}