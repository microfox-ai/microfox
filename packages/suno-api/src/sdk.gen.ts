// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PostApiGenerateData, PostApiGenerateResponses, PostV1ChatCompletionsData, PostV1ChatCompletionsResponses, PostApiCustomGenerateData, PostApiCustomGenerateResponses, PostApiExtendAudioData, PostApiGenerateStemsData, PostApiGenerateStemsResponses, PostApiGenerateLyricsData, PostApiGenerateLyricsResponses, GetApiGetData, GetApiGetResponses, GetApiGetLimitData, GetApiGetLimitResponses, GetApiGetAlignedLyricsData, GetApiGetAlignedLyricsResponses, GetApiClipData, GetApiClipResponses, GetApiClipErrors, PostApiConcatData, PostApiConcatResponses, PostApiConcatErrors, GetApiPersonaData, GetApiPersonaResponses, GetApiPersonaErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Generate audio based on Prompt.
 * It will automatically fill in the lyrics.
 *
 * 2 audio files will be generated for each request, consuming a total of 10 credits.
 *
 * `wait_audio` can be set to API mode:
 *
 * • By default, it is set to `false`, which indicates the background mode. It will only return audio task information, and you will need to call the get API to retrieve detailed audio information.
 *
 * • If set to `true`, it simulates synchronous mode. The API will wait for a maximum of 100s until the audio is generated, and will directly return the audio link and other information. Recommend using in GPTs and other agents.
 */
export const postApiGenerate = <ThrowOnError extends boolean = false>(options?: Options<PostApiGenerateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiGenerateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate audio based on Prompt - OpenAI API format compatibility.
 * Convert the `/api/generate` API to be compatible with the OpenAI `/v1/chat/completions` API format.
 *
 * Generally used in OpenAI compatible clients.
 */
export const postV1ChatCompletions = <ThrowOnError extends boolean = false>(options?: Options<PostV1ChatCompletionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV1ChatCompletionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/chat/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate Audio - Custom Mode
 * The custom mode enables users to provide additional details about the music, such as music genre, lyrics, and more.
 *
 * 2 audio files will be generated for each request, consuming a total of 10 credits.
 *
 * `wait_audio` can be set to API mode:
 *
 * • By default, it is set to false, which indicates the background mode. It will only return audio task information, and you will need to call the get API to retrieve detailed audio information.
 *
 * • If set to true, it simulates synchronous mode. The API will wait for a maximum of 100s until the audio is generated, and will directly return the audio link and other information. Recommend using in GPTs and other agents.
 */
export const postApiCustomGenerate = <ThrowOnError extends boolean = false>(options?: Options<PostApiCustomGenerateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiCustomGenerateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/custom_generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Extend audio length.
 * Extend audio length.
 */
export const postApiExtendAudio = <ThrowOnError extends boolean = false>(options?: Options<PostApiExtendAudioData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/extend_audio',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Make stem tracks (separate audio and music track).
 * Make stem tracks (separate audio and music track).
 */
export const postApiGenerateStems = <ThrowOnError extends boolean = false>(options?: Options<PostApiGenerateStemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiGenerateStemsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/generate_stems',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate lyrics based on Prompt.
 * Generate lyrics based on Prompt.
 */
export const postApiGenerateLyrics = <ThrowOnError extends boolean = false>(options?: Options<PostApiGenerateLyricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiGenerateLyricsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/generate_lyrics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get audio information
 */
export const getApiGet = <ThrowOnError extends boolean = false>(options?: Options<GetApiGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/get',
        ...options
    });
};

/**
 * Get quota information.
 */
export const getApiGetLimit = <ThrowOnError extends boolean = false>(options?: Options<GetApiGetLimitData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiGetLimitResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/get_limit',
        ...options
    });
};

/**
 * Get lyric alignment.
 * Get lyric alignment.
 */
export const getApiGetAlignedLyrics = <ThrowOnError extends boolean = false>(options: Options<GetApiGetAlignedLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiGetAlignedLyricsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/get_aligned_lyrics',
        ...options
    });
};

/**
 * Get clip information based on ID.
 * Retrieve specific clip information using the provided clip ID as a query parameter.
 */
export const getApiClip = <ThrowOnError extends boolean = false>(options: Options<GetApiClipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiClipResponses, GetApiClipErrors, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/clip',
        ...options
    });
};

/**
 * Generate the whole song from extensions.
 * Concatenate audio clips to generate a complete song using the provided clip ID.
 */
export const postApiConcat = <ThrowOnError extends boolean = false>(options?: Options<PostApiConcatData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiConcatResponses, PostApiConcatErrors, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/concat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get persona information and clips.
 * Retrieve persona information, including associated clips and pagination data.
 */
export const getApiPersona = <ThrowOnError extends boolean = false>(options: Options<GetApiPersonaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPersonaResponses, GetApiPersonaErrors, ThrowOnError>({
        security: [
            {
                name: 'suno-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/persona',
        ...options
    });
};