// This file is auto-generated by @hey-api/openapi-ts

/**
 * audio_info
 * Audio Info
 */
export type AudioInfo = {
    /**
     * audio id
     */
    id: string;
    /**
     * music title
     */
    title: string;
    /**
     * music cover image
     */
    image_url: string;
    /**
     * music lyric
     */
    lyric: string;
    /**
     * music download url
     */
    audio_url: string;
    /**
     * Music video download link, can be used to share
     */
    video_url: string;
    /**
     * Create time
     */
    created_at: string;
    /**
     * suno model name, chirp-v3
     */
    model_name: string;
    /**
     * The generated states include submitted, queue, streaming, complete.
     */
    status: string;
    /**
     * Simple mode on user input prompt, Suno will generate formal prompts, lyrics, etc.
     */
    gpt_description_prompt: string;
    /**
     * The final prompt for executing the generation task, customized by the user in custom mode, automatically generated by Suno in simple mode.
     */
    prompt: string;
    /**
     * Type
     */
    type: string;
    /**
     * Music genre. User-provided in custom mode, automatically generated by Suno in simple mode.
     */
    tags: string;
};

export type PostApiGenerateData = {
    body?: {
        /**
         * Prompt
         */
        prompt: string;
        /**
         * Whether to generate instrumental music
         */
        make_instrumental: boolean;
        /**
         * Model name ,default is chirp-v3-5
         */
        model?: string;
        /**
         * Whether to wait for music generation, default is false, directly return audio task information; set to true, will wait for up to 100s until the audio is generated.
         */
        wait_audio: boolean;
    };
    path?: never;
    query?: never;
    url: '/api/generate';
};

export type PostApiGenerateResponses = {
    /**
     * success
     */
    200: Array<{
        0: AudioInfo;
        1: AudioInfo;
    }>;
};

export type PostApiGenerateResponse = PostApiGenerateResponses[keyof PostApiGenerateResponses];

export type PostV1ChatCompletionsData = {
    body?: {
        /**
         * Prompt
         */
        prompt: string;
    };
    path?: never;
    query?: never;
    url: '/v1/chat/completions';
};

export type PostV1ChatCompletionsResponses = {
    /**
     * success
     */
    200: {
        /**
         * Text description for music, with details like title, album cover, lyrics, and more.
         */
        data?: string;
    };
};

export type PostV1ChatCompletionsResponse = PostV1ChatCompletionsResponses[keyof PostV1ChatCompletionsResponses];

export type PostApiCustomGenerateData = {
    body?: {
        /**
         * Detailed prompt, including information such as music lyrics.
         */
        prompt: string;
        /**
         * Music genre
         */
        tags: string;
        /**
         * Negative Music genre
         */
        negative_tags?: string;
        /**
         * Music title
         */
        title: string;
        /**
         * Whether to generate instrumental music
         */
        make_instrumental?: boolean;
        /**
         * Model name ,default is chirp-v3-5
         */
        model?: string;
        /**
         * Whether to wait for music generation, default is false, directly return audio task information; set to true, will wait for up to 100s until the audio is generated.
         */
        wait_audio?: boolean;
    };
    path?: never;
    query?: never;
    url: '/api/custom_generate';
};

export type PostApiCustomGenerateResponses = {
    /**
     * success
     */
    200: Array<{
        0: AudioInfo;
        1: AudioInfo;
    }>;
};

export type PostApiCustomGenerateResponse = PostApiCustomGenerateResponses[keyof PostApiCustomGenerateResponses];

export type PostApiExtendAudioData = {
    body?: {
        /**
         * The ID of the audio clip to extend.
         */
        audio_id: string;
        /**
         * Detailed prompt, including information such as music lyrics.
         */
        prompt?: string;
        /**
         * Extend a new clip from a song at mm:ss(e.g. 00:30). Default extends from the end of the song.
         */
        continue_at?: string;
        /**
         * Music title
         */
        title?: string;
        /**
         * Music genre
         */
        tags?: string;
        /**
         * Negative Music genre
         */
        negative_tags?: string;
        /**
         * Model name ,default is chirp-v3-5
         */
        model?: string;
    };
    path?: never;
    query?: never;
    url: '/api/extend_audio';
};

export type PostApiGenerateStemsData = {
    body?: {
        /**
         * The ID of the song to generate stems for.
         */
        audio_id: string;
    };
    path?: never;
    query?: never;
    url: '/api/generate_stems';
};

export type PostApiGenerateStemsResponses = {
    /**
     * Audio Info
     */
    200: unknown;
};

export type PostApiGenerateLyricsData = {
    body?: {
        /**
         * Prompt
         */
        prompt: string;
    };
    path?: never;
    query?: never;
    url: '/api/generate_lyrics';
};

export type PostApiGenerateLyricsResponses = {
    /**
     * success
     */
    200: {
        /**
         * Lyrics
         */
        text?: string;
        /**
         * music title
         */
        title?: string;
        /**
         * Status
         */
        status?: string;
    };
};

export type PostApiGenerateLyricsResponse = PostApiGenerateLyricsResponses[keyof PostApiGenerateLyricsResponses];

export type GetApiGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Audio IDs, separated by commas. Leave blank to return a list of all music.
         */
        ids?: string;
        /**
         * Page number
         */
        page?: number;
    };
    url: '/api/get';
};

export type GetApiGetResponses = {
    /**
     * success
     */
    200: Array<{
        0: AudioInfo;
        1: AudioInfo;
    }>;
};

export type GetApiGetResponse = GetApiGetResponses[keyof GetApiGetResponses];

export type GetApiGetLimitData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/get_limit';
};

export type GetApiGetLimitResponses = {
    /**
     * success
     */
    200: {
        /**
         * Remaining credits,Each generated audio consumes 5 credits.
         */
        credits_left: number;
        /**
         * Period
         */
        period: string;
        /**
         * Monthly limit
         */
        monthly_limit: number;
        /**
         * Monthly usage
         */
        monthly_usage: number;
    };
};

export type GetApiGetLimitResponse = GetApiGetLimitResponses[keyof GetApiGetLimitResponses];

export type GetApiGetAlignedLyricsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Song ID
         */
        song_id: string;
    };
    url: '/api/get_aligned_lyrics';
};

export type GetApiGetAlignedLyricsResponses = {
    /**
     * Audio Info
     */
    200: unknown;
};

export type GetApiClipData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Clip ID
         */
        id: string;
    };
    url: '/api/clip';
};

export type GetApiClipErrors = {
    /**
     * Missing parameter id
     */
    400: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiClipError = GetApiClipErrors[keyof GetApiClipErrors];

export type GetApiClipResponses = {
    /**
     * success
     */
    200: AudioInfo;
};

export type GetApiClipResponse = GetApiClipResponses[keyof GetApiClipResponses];

export type PostApiConcatData = {
    body?: {
        /**
         * Clip ID
         */
        clip_id: string;
    };
    path?: never;
    query?: never;
    url: '/api/concat';
};

export type PostApiConcatErrors = {
    /**
     * Clip id is required
     */
    400: {
        error?: string;
    };
    /**
     * Payment required
     */
    402: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type PostApiConcatError = PostApiConcatErrors[keyof PostApiConcatErrors];

export type PostApiConcatResponses = {
    /**
     * success
     */
    200: AudioInfo;
};

export type PostApiConcatResponse = PostApiConcatResponses[keyof PostApiConcatResponses];

export type GetApiPersonaData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Persona ID
         */
        id: string;
        /**
         * Page number (defaults to 1)
         */
        page?: number;
    };
    url: '/api/persona';
};

export type GetApiPersonaErrors = {
    /**
     * Missing parameter id
     */
    400: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiPersonaError = GetApiPersonaErrors[keyof GetApiPersonaErrors];

export type GetApiPersonaResponses = {
    /**
     * success
     */
    200: {
        persona?: {
            /**
             * Persona ID
             */
            id?: string;
            /**
             * Persona name
             */
            name?: string;
            /**
             * Persona description
             */
            description?: string;
            /**
             * Persona image URL
             */
            image_s3_id?: string;
            /**
             * Root clip ID
             */
            root_clip_id?: string;
            /**
             * Root clip information
             */
            clip?: {
                [key: string]: unknown;
            };
            persona_clips?: Array<{
                /**
                 * Clip information
                 */
                clip?: {
                    [key: string]: unknown;
                };
            }>;
            /**
             * Whether this is a Suno official persona
             */
            is_suno_persona?: boolean;
            /**
             * Whether this persona is public
             */
            is_public?: boolean;
            /**
             * Number of upvotes
             */
            upvote_count?: number;
            /**
             * Number of clips
             */
            clip_count?: number;
        };
        /**
         * Total number of results
         */
        total_results?: number;
        /**
         * Current page number
         */
        current_page?: number;
        /**
         * Whether the current user is following this persona
         */
        is_following?: boolean;
    };
};

export type GetApiPersonaResponse = GetApiPersonaResponses[keyof GetApiPersonaResponses];

export type ClientOptions = {
    baseUrl?: string;
};