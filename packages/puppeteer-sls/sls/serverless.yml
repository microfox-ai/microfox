service: public-puppeteer-sls-api

package:
  excludeDevDependencies: true
  exclude:
    - venv/**
    - src/**
    - node_modules/serverless-offline/**
    - node_modules/@sparticuz/chromium/**

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, env:ENVIRONMENT, 'dev'}
  environment: ${file(env.json)}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'sqs:SendMessage'
          Resource:
            - 'Fn::GetAtt': ['PuppeteerQueue', 'Arn']

custom:
  stage: ${env:ENVIRONMENT, 'dev'}
  serverless-offline:
    printOutput: true
    httpPort: 4000
    lambdaPort: 4002
    useChildProcesses: true
    useWorkerThreads: true
    noCookieValidation: true
    allowCache: true
    hideStackTraces: false
    disableCookieValidation: true
    noTimeout: true
    environment: ${file(env.json)}

functions:
  proxy:
    handler: dist/proxy.handler
    environment:
      PUPPETEER_QUEUE_URL: { 'Ref': 'PuppeteerQueue' }
    events:
      - http:
          path: /{functionName}
          method: any
          cors: true
  unifiedHandler:
    handler: dist/index.handler
    timeout: 300
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PuppeteerQueue
              - Arn
    layers:
      - arn:aws:lambda:us-east-1:035837222000:layer:chromium-x86-135:1

resources:
  Resources:
    PuppeteerQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: 'puppeteer-queue-${self:provider.stage}'
  Outputs:
    ApiEndpoints:
      Description: 'API Endpoints'
      Value:
        Fn::Join:
          - ''
          - - 'API: https://'
            - Ref: 'ApiGatewayRestApi'
            - '.execute-api.'
            - Ref: 'AWS::Region'
            - '/${self:provider.stage}'
